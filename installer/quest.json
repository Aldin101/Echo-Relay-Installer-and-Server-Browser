{
  "Script": "JFByb2dyZXNzUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJw0KJGZpbGUgPSBJbnZva2UtV2ViUmVxdWVzdCBodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvLVJlbGF5LUluc3RhbGxlci9xdWVzdC5qc29uIC1Vc2VCYXNpY1BhcnNpbmcNCiRnbG9iYWw6ZGF0YWJhc2UgPSAkZmlsZS5Db250ZW50IHwgQ29udmVydEZyb20tSnNvbg0KDQpmdW5jdGlvbiBpbnN0YWxsIHsNCiAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVmlzaWJsZSA9ICRmYWxzZQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtZXEgIiIgLW9yICRwYXNzd29yZEJveC50ZXh0IC1lcSAiIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQbGVhc2UgZW50ZXIgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dC5MZW5ndGggLWx0IDgpIHsNCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlRleHQgPSAiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlthLXpdIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBsZXR0ZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlswLTldIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBudW1iZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtbWF0Y2ggIiAiIC1vciAkcGFzc3dvcmRCb3gudGV4dCAtbWF0Y2ggIiAiKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlVzZXJuYW1lIGFuZCBQYXNzd29yZCBjYW5ub3QgY29udGFpbiBzcGFjZXMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkaW5mb0NoZWNrQm94LkNoZWNrZWQgLWVxICRmYWxzZSkgew0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICBta2RpciAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcIg0KICAgICRjb25maWcgPSBAe30NCiAgICAkY29uZmlnIHwgQWRkLU1lbWJlciAtTmFtZSAndXNlcm5hbWUnIC1UeXBlIE5vdGVQcm9wZXJ0eSAtVmFsdWUgIiQoJHVzZXJuYW1lQm94LnRleHQpIg0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICdwYXNzd29yZCcgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJCgkcGFzc3dvcmRCb3gudGV4dCkiDQogICAgJGNvbmZpZyB8IEFkZC1NZW1iZXIgLU5hbWUgJ2dhbWVQYXRoJyAtVHlwZSBOb3RlUHJvcGVydHkgLVZhbHVlICIkKCRnbG9iYWw6Z2FtZVBhdGgpIg0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICdxdWVzdCcgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJGNvbmZpZyB8IGNvbnZlcnR0by1qc29uIHwgc2V0LWNvbnRlbnQgIiRlbnY6YXBwZGF0YVxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyXGNvbmZpZy5qc29uIg0KICAgIEludm9rZS1XZWJSZXF1ZXN0ICJodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9lY2hvLXJlbGF5LXNlcnZlci1icm93c2VyL0VjaG8lMjBSZWxheSUyMFNlcnZlciUyMEJyb3dzZXIuZXhlIiAtT3V0RmlsZSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJFdzaFNoZWxsID0gTmV3LU9iamVjdCAtY29tT2JqZWN0IFdTY3JpcHQuU2hlbGwNCiAgICAkU2hvcnRjdXQgPSAkV3NoU2hlbGwuQ3JlYXRlU2hvcnRjdXQoIiRlbnY6VVNFUlBST0ZJTEVcRGVza3RvcFxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyLmxuayIpDQogICAgJFNob3J0Y3V0LlRhcmdldFBhdGggPSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJFNob3J0Y3V0LlNhdmUoKQ0KICAgIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94XTo6U2hvdygiRWNobyBSZWxheSBTdWNjZXNzZnVsbHkgSW5zdGFsbGVkIiwgIkVjaG8gUmVsYXkgSW5zdGFsbGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06OkluZm9ybWF0aW9uKQ0KICAgIHN0YXJ0LXByb2Nlc3MgIiRlbnY6YXBwZGF0YVxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXIuZXhlIg0KICAgICRtZW51LkNsb3NlKCkNCn0NCg0KDQoNCg0KW3JlZmxlY3Rpb24uYXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCAiU3lzdGVtLldpbmRvd3MuRm9ybXMiKQ0KW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RW5hYmxlVmlzdWFsU3R5bGVzKCkNCiRtZW51ID0gbmV3LW9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtDQoNCiRtZW51LnRleHQgPSAiRWNobyBSZWxheSBJbnN0YWxsZXIiDQokZmlsZUxvY2F0aW9uID0gR2V0LUNpbUluc3RhbmNlIFdpbjMyX1Byb2Nlc3MgLUZpbHRlciAibmFtZSA9ICdFY2hvIFJlbGF5IEluc3RhbGxlci5leGUnIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KJGZpbGVMb2NhdGlvbjEgPSAkZmlsZUxvY2F0aW9uLkNvbW1hbmRMaW5lIC1yZXBsYWNlICciJywgIiINCiRtZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiRtZW51LlNpemUgPSBOZXctT2JqZWN0IERyYXdpbmcuU2l6ZSBAKDYwMCwgNDAwKQ0KJG1lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQokbWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQokbWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KDQokbGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTApDQokbGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokbGFiZWwuVGV4dCA9ICJFY2hvIFJlbGF5IEluc3RhbGxlciINCiRsYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRsYWJlbCkNCg0KJHVzZXJuYW1lID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJHVzZXJuYW1lLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDQwKQ0KJHVzZXJuYW1lLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHVzZXJuYW1lLlRleHQgPSAiVXNlcm5hbWUiDQokdXNlcm5hbWUuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRtZW51LkNvbnRyb2xzLkFkZCgkdXNlcm5hbWUpDQoNCiR1c2VybmFtZUJveCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVGV4dEJveA0KJHVzZXJuYW1lQm94LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDYwKQ0KJHVzZXJuYW1lQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHVzZXJuYW1lQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJHVzZXJuYW1lQm94KQ0KDQokcGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokcGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsOTApDQokcGFzc3dvcmQuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokcGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCINCiRwYXNzd29yZC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRwYXNzd29yZCkNCg0KJHBhc3N3b3JkQm94ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UZXh0Qm94DQokcGFzc3dvcmRCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTEwKQ0KJHBhc3N3b3JkQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHBhc3N3b3JkQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyID0gIioiDQokbWVudS5Db250cm9scy5BZGQoJHBhc3N3b3JkQm94KQ0KDQokc2hvd1Bhc3N3b3JkID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QaWN0dXJlQm94DQokc2hvd1Bhc3N3b3JkLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDE4OCwgMTExKQ0KJHNob3dQYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIxLCAyMSkNCiRzaG93UGFzc3dvcmQuU2l6ZU1vZGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuUGljdHVyZUJveFNpemVNb2RlXTo6U3RyZXRjaEltYWdlDQokc2hvd1Bhc3N3b3JkLkltYWdlTG9jYXRpb24gPSAiaHR0cHM6Ly9hbGRpbjEwMS5naXRodWIuaW8vRWNoby1SZWxheS1JbnN0YWxsZXIvZXllLnBuZyINCiRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6V2hpdGUNCiRzaG93UGFzc3dvcmQuQWRkX0NsaWNrKHsNCiAgICBpZiAoJHBhc3N3b3JkQm94LlBhc3N3b3JkQ2hhciAtZXEgIioiKSB7DQogICAgICAgICRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAkbnVsbA0KICAgICAgICAkc2hvd1Bhc3N3b3JkLkJhY2tDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkxpZ2h0Qmx1ZQ0KICAgICAgICAkdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJIaWRlIFBhc3N3b3JkIikNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyID0gIioiDQogICAgICAgICRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6V2hpdGUNCiAgICAgICAgJHRvb2xUaXAuU2V0VG9vbFRpcCgkc2hvd1Bhc3N3b3JkLCAiU2hvdyBQYXNzd29yZCIpDQogICAgfQ0KfSkNCiRzaG93UGFzc3dvcmQuQWRkX01vdXNlRW50ZXIoew0KICAgICRzaG93UGFzc3dvcmQuQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQm9yZGVyU3R5bGVdOjpGaXhlZFNpbmdsZQ0KfSkNCiRzaG93UGFzc3dvcmQuQWRkX01vdXNlTGVhdmUoew0KICAgICRzaG93UGFzc3dvcmQuQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQm9yZGVyU3R5bGVdOjpOb25lDQp9KQ0KJG1lbnUuQ29udHJvbHMuQWRkKCRzaG93UGFzc3dvcmQpDQoNCiRzaG93UGFzc3dvcmQuQnJpbmdUb0Zyb250KCkNCg0KJHRvb2xUaXAgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRvb2xUaXANCiR0b29sVGlwLkF1dG9tYXRpY0RlbGF5ID0gNTAwDQokdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJTaG93IFBhc3N3b3JkIikNCg0KJG5vVXNlcm5hbWVPclBhc3N3b3JkID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDE3MCkNCiRub1VzZXJuYW1lT3JQYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIxMCwyMCkNCiRub1VzZXJuYW1lT3JQYXNzd29yZC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDgiDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQuRm9yZUNvbG9yID0gIlJlZCINCiRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJGZhbHNlDQokbWVudS5Db250cm9scy5BZGQoJG5vVXNlcm5hbWVPclBhc3N3b3JkKQ0KDQokaW5mb0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJGluZm9MYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMjAsMTApDQokaW5mb0xhYmVsLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMzApDQokaW5mb0xhYmVsLlRleHQgPSAiVGhpcyBpbmZvcm1hdGlvbiBpcyBub3QgeW91ciBNZXRhIGxvZyBpbiwgaXQgaXMgeW91ciBhY2NvdW50YG5vbiBFY2hvIFJlbGF5IHNlcnZlcnMuIEJ1dCB5b3VyIGFjY291bnQgaW5mbyBpcyBzdGlsbCB0aWVkIHRvYG55b3VyIE1ldGEgYWNjb3VudCBhbmQgY2Fubm90IGJlIGNoYW5nZWQgbGF0ZXIuYG5JZiB5b3UgZm9yZ2V0IHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvbiBmb3IgYSBzZXJ2ZXIgcGxlYXNlYG5jb250YWN0IHRoZSBzZXJ2ZXIgaG9zdC5gbmBuVGhlcmUgaXMgbm8gY2hlY2sgZm9yIGlmIHlvdXIgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbmBuY2xhaW1lZCBhdCB0aGlzIHRpbWUuIElmIHlvdSByZWNlaXZlIGxvZ2luIGVycm9ycyBwbGVhc2VgbnRyeSBhIGRpZmZlcmVudCB1c2VybmFtZS5gbmBuRE8gTk9UIHVzZSB0aGUgc2FtZSBwYXNzd29yZCBmb3IgeW91IE1ldGEgYWNjb3VudCBvcmBuYW55IG90aGVyIG9ubGluZSBzZXJ2aWNlLiBXaGlsZSB1c2luZyB1bmlxdWUgcGFzc3dvcmRzIGZvcmBuYWxsIG9ubGluZSBzZXJ2aWNlcyBpcyBhbHdheXMgcmVjb21tZW5kZWQsIGl0IGlzIGVzcGVjaWFsbHlgbmltcG9ydGFudCBmb3IgRWNobyBSZWxheSBiZWNhdXNlIHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvbmBuaXMgbm90IHNlY3VyZWQuIg0KJGluZm9MYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRpbmZvTGFiZWwpDQoNCiRpbmZvQ2hlY2tCb3ggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNoZWNrQm94DQokaW5mb0NoZWNrQm94LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIyMCwyNDApDQokaW5mb0NoZWNrQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMCkNCiRpbmZvQ2hlY2tCb3guVGV4dCA9ICJJIGhhdmUgcmVhZCBhbmQgdW5kZXJzdGFuZCB0aGUgYWJvdmUgbm90aWNlIg0KJGluZm9DaGVja0JveC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KDQokaW5mb0NoZWNrQm94LkFkZF9LZXlEb3duKHsNCiAgICBpZiAoJF8uS2V5Q29kZSAtZXEgIkVudGVyIikgew0KICAgICAgICAkaW5mb0NoZWNrQm94LkNoZWNrZWQgPSAhJGluZm9DaGVja0JveC5DaGVja2VkDQogICAgfQ0KfSkNCg0KJG1lbnUuQ29udHJvbHMuYWRkKCRpbmZvQ2hlY2tCb3gpDQoNCg0KJGluc3RhbGwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KJGluc3RhbGwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTQwKQ0KJGluc3RhbGwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMzApDQokaW5zdGFsbC5UZXh0ID0gIkluc3RhbGwiDQokaW5zdGFsbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJGluc3RhbGwuQWRkX0NsaWNrKHtpbnN0YWxsfSkNCiRtZW51LkNvbnRyb2xzLkFkZCgkaW5zdGFsbCkNCg0KJGNyZWRpdHMgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokY3JlZGl0cy5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSg1LDMyNSkNCiRjcmVkaXRzLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMDApDQokY3JlZGl0cy5UZXh0ID0gIkVjaG8gUmVsYXkgQ3JlYXRlZCBieTogWGVub21lZ2Fgbkluc3RhbGxlciBDcmVhdGVkIGJ5OkFsZGluMTAxIg0KJGNyZWRpdHMuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRtZW51LkNvbnRyb2xzLkFkZCgkY3JlZGl0cykNCg0KJG1lbnUuU2hvd0RpYWxvZygpDQoNCg=="
}
