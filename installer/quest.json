{
  "Script": "JFByb2dyZXNzUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJw0KJGZpbGUgPSBJbnZva2UtV2ViUmVxdWVzdCBodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvLVJlbGF5LUluc3RhbGxlci9xdWVzdC5qc29uIC1Vc2VCYXNpY1BhcnNpbmcNCiRnbG9iYWw6ZGF0YWJhc2UgPSAkZmlsZS5Db250ZW50IHwgQ29udmVydEZyb20tSnNvbg0KDQpmdW5jdGlvbiBpbnN0YWxsIHsNCiAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVmlzaWJsZSA9ICRmYWxzZQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtZXEgIiIgLW9yICRwYXNzd29yZEJveC50ZXh0IC1lcSAiIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQbGVhc2UgZW50ZXIgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dC5MZW5ndGggLWx0IDgpIHsNCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlRleHQgPSAiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlthLXpdIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBsZXR0ZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlswLTldIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBudW1iZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtbWF0Y2ggIiAiIC1vciAkcGFzc3dvcmRCb3gudGV4dCAtbWF0Y2ggIiAiKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlVzZXJuYW1lIGFuZCBQYXNzd29yZCBjYW5ub3QgY29udGFpbiBzcGFjZXMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkaW5mb0NoZWNrQm94LkNoZWNrZWQgLWVxICRmYWxzZSkgew0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICBta2RpciAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcIg0KICAgICRjb25maWcgPSBAe30NCiAgICAkY29uZmlnIHwgQWRkLU1lbWJlciAtTmFtZSAndXNlcm5hbWUnIC1UeXBlIE5vdGVQcm9wZXJ0eSAtVmFsdWUgIiQoJHVzZXJuYW1lQm94LnRleHQpIg0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICdwYXNzd29yZCcgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJCgkcGFzc3dvcmRCb3gudGV4dCkiDQogICAgJGNvbmZpZyB8IEFkZC1NZW1iZXIgLU5hbWUgJ2dhbWVQYXRoJyAtVHlwZSBOb3RlUHJvcGVydHkgLVZhbHVlICIkKCRnbG9iYWw6Z2FtZVBhdGgpIg0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICdxdWVzdCcgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJGNvbmZpZyB8IGNvbnZlcnR0by1qc29uIHwgc2V0LWNvbnRlbnQgIiRlbnY6YXBwZGF0YVxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyXGNvbmZpZy5qc29uIg0KICAgIEludm9rZS1XZWJSZXF1ZXN0ICJodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9lY2hvLXJlbGF5LXNlcnZlci1icm93c2VyL0VjaG8lMjBSZWxheSUyMFNlcnZlciUyMEJyb3dzZXIuZXhlIiAtT3V0RmlsZSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJFdzaFNoZWxsID0gTmV3LU9iamVjdCAtY29tT2JqZWN0IFdTY3JpcHQuU2hlbGwNCiAgICAkU2hvcnRjdXQgPSAkV3NoU2hlbGwuQ3JlYXRlU2hvcnRjdXQoIiRlbnY6VVNFUlBST0ZJTEVcRGVza3RvcFxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyLmxuayIpDQogICAgJFNob3J0Y3V0LlRhcmdldFBhdGggPSAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJFNob3J0Y3V0LlNhdmUoKQ0KICAgIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94XTo6U2hvdygiRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3NlciBpbnN0YWxsZWQhYG5gblNlbGVjdCBhIHNlcnZlciBpbiB0aGUgc2VydmVyIGJyb3dzZXIgdG8gZ2V0IHN0YXJ0ZWQhIiwgIkVjaG8gUmVsYXkgSW5zdGFsbGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06OkluZm9ybWF0aW9uKQ0KICAgIHN0YXJ0LXByb2Nlc3MgIiRlbnY6YXBwZGF0YVxFY2hvIFJlbGF5IFNlcnZlciBCcm93c2VyXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXIuZXhlIg0KICAgICRtZW51LkNsb3NlKCkNCn0NCg0KDQoNCg0KW3JlZmxlY3Rpb24uYXNzZW1ibHldOjpMb2FkV2l0aFBhcnRpYWxOYW1lKCAiU3lzdGVtLldpbmRvd3MuRm9ybXMiKQ0KW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RW5hYmxlVmlzdWFsU3R5bGVzKCkNCiRtZW51ID0gbmV3LW9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtDQoNCiRtZW51LnRleHQgPSAiRWNobyBSZWxheSBJbnN0YWxsZXIiDQokZmlsZUxvY2F0aW9uID0gR2V0LUNpbUluc3RhbmNlIFdpbjMyX1Byb2Nlc3MgLUZpbHRlciAibmFtZSA9ICdFY2hvIFJlbGF5IEluc3RhbGxlci5leGUnIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KJGZpbGVMb2NhdGlvbjEgPSAkZmlsZUxvY2F0aW9uLkNvbW1hbmRMaW5lIC1yZXBsYWNlICciJywgIiINCiRtZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiRtZW51LlNpemUgPSBOZXctT2JqZWN0IERyYXdpbmcuU2l6ZSBAKDYwMCwgNDAwKQ0KJG1lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQokbWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQokbWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KDQokbGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsOCkNCiRsYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyNSkNCiRsYWJlbC5UZXh0ID0gIkVjaG8gUmVsYXkgSW5zdGFsbGVyIg0KJGxhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTUiDQokbWVudS5Db250cm9scy5BZGQoJGxhYmVsKQ0KDQokdXNlcm5hbWUgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokdXNlcm5hbWUuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNDApDQokdXNlcm5hbWUuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokdXNlcm5hbWUuVGV4dCA9ICJVc2VybmFtZSINCiR1c2VybmFtZS5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCR1c2VybmFtZSkNCg0KJHVzZXJuYW1lQm94ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UZXh0Qm94DQokdXNlcm5hbWVCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNjApDQokdXNlcm5hbWVCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokdXNlcm5hbWVCb3guRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRtZW51LkNvbnRyb2xzLkFkZCgkdXNlcm5hbWVCb3gpDQoNCiRwYXNzd29yZCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiRwYXNzd29yZC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCw5MCkNCiRwYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyMCkNCiRwYXNzd29yZC5UZXh0ID0gIlBhc3N3b3JkIg0KJHBhc3N3b3JkLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJHBhc3N3b3JkKQ0KDQokcGFzc3dvcmRCb3ggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRleHRCb3gNCiRwYXNzd29yZEJveC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMTApDQokcGFzc3dvcmRCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokcGFzc3dvcmRCb3guRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAiKiINCiRtZW51LkNvbnRyb2xzLkFkZCgkcGFzc3dvcmRCb3gpDQoNCiRzaG93UGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlBpY3R1cmVCb3gNCiRzaG93UGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTg4LCAxMTEpDQokc2hvd1Bhc3N3b3JkLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjEsIDIxKQ0KJHNob3dQYXNzd29yZC5TaXplTW9kZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QaWN0dXJlQm94U2l6ZU1vZGVdOjpTdHJldGNoSW1hZ2UNCiRzaG93UGFzc3dvcmQuSW1hZ2VMb2NhdGlvbiA9ICJodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvLVJlbGF5LUluc3RhbGxlci9leWUucG5nIg0KJHNob3dQYXNzd29yZC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpXaGl0ZQ0KJHNob3dQYXNzd29yZC5BZGRfQ2xpY2soew0KICAgIGlmICgkcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyIC1lcSAiKiIpIHsNCiAgICAgICAgJHBhc3N3b3JkQm94LlBhc3N3b3JkQ2hhciA9ICRudWxsDQogICAgICAgICRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6TGlnaHRCbHVlDQogICAgICAgICR0b29sVGlwLlNldFRvb2xUaXAoJHNob3dQYXNzd29yZCwgIkhpZGUgUGFzc3dvcmQiKQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAiKiINCiAgICAgICAgJHNob3dQYXNzd29yZC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpXaGl0ZQ0KICAgICAgICAkdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJTaG93IFBhc3N3b3JkIikNCiAgICB9DQp9KQ0KJHNob3dQYXNzd29yZC5BZGRfTW91c2VFbnRlcih7DQogICAgJHNob3dQYXNzd29yZC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06OkZpeGVkU2luZ2xlDQp9KQ0KJHNob3dQYXNzd29yZC5BZGRfTW91c2VMZWF2ZSh7DQogICAgJHNob3dQYXNzd29yZC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06Ok5vbmUNCn0pDQokbWVudS5Db250cm9scy5BZGQoJHNob3dQYXNzd29yZCkNCg0KJHNob3dQYXNzd29yZC5CcmluZ1RvRnJvbnQoKQ0KDQokdG9vbFRpcCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFRpcA0KJHRvb2xUaXAuQXV0b21hdGljRGVsYXkgPSA1MDANCiR0b29sVGlwLlNldFRvb2xUaXAoJHNob3dQYXNzd29yZCwgIlNob3cgUGFzc3dvcmQiKQ0KDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTcwKQ0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjEwLDIwKQ0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsOCINCiRub1VzZXJuYW1lT3JQYXNzd29yZC5Gb3JlQ29sb3IgPSAiUmVkIg0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkZmFsc2UNCiRtZW51LkNvbnRyb2xzLkFkZCgkbm9Vc2VybmFtZU9yUGFzc3dvcmQpDQoNCiRpbmZvTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokaW5mb0xhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIyMCwxMCkNCiRpbmZvTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIzMCkNCiRpbmZvTGFiZWwuVGV4dCA9ICJUaGlzIGluZm9ybWF0aW9uIGlzIG5vdCB5b3VyIE1ldGEgbG9nIGluLCBpdCBpcyB5b3VyIGFjY291bnRgbm9uIEVjaG8gUmVsYXkgc2VydmVycy4gQnV0IHlvdXIgYWNjb3VudCBpbmZvIGlzIHN0aWxsIHRpZWQgdG9gbnlvdXIgTWV0YSBhY2NvdW50IGFuZCBjYW5ub3QgYmUgY2hhbmdlZCBsYXRlci5gbklmIHlvdSBmb3JnZXQgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uIGZvciBhIHNlcnZlciBwbGVhc2VgbmNvbnRhY3QgdGhlIHNlcnZlciBob3N0LmBuYG5UaGVyZSBpcyBubyBjaGVjayBmb3IgaWYgeW91ciB1c2VybmFtZSBoYXMgYWxyZWFkeSBiZWVuYG5jbGFpbWVkIGF0IHRoaXMgdGltZS4gSWYgeW91IHJlY2VpdmUgbG9naW4gZXJyb3JzIHBsZWFzZWBudHJ5IGEgZGlmZmVyZW50IHVzZXJuYW1lLmBuYG5ETyBOT1QgdXNlIHRoZSBzYW1lIHBhc3N3b3JkIGZvciB5b3UgTWV0YSBhY2NvdW50IG9yYG5hbnkgb3RoZXIgb25saW5lIHNlcnZpY2UuIFdoaWxlIHVzaW5nIHVuaXF1ZSBwYXNzd29yZHMgZm9yYG5hbGwgb25saW5lIHNlcnZpY2VzIGlzIGFsd2F5cyByZWNvbW1lbmRlZCwgaXQgaXMgZXNwZWNpYWxseWBuaW1wb3J0YW50IGZvciBFY2hvIFJlbGF5IGJlY2F1c2UgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uYG5pcyBub3Qgc2VjdXJlZC4iDQokaW5mb0xhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJGluZm9MYWJlbCkNCg0KJGluZm9DaGVja0JveCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ2hlY2tCb3gNCiRpbmZvQ2hlY2tCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjIwLDI0MCkNCiRpbmZvQ2hlY2tCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwKQ0KJGluZm9DaGVja0JveC5UZXh0ID0gIkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0YW5kIHRoZSBhYm92ZSBub3RpY2UiDQokaW5mb0NoZWNrQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQoNCiRpbmZvQ2hlY2tCb3guQWRkX0tleURvd24oew0KICAgIGlmICgkXy5LZXlDb2RlIC1lcSAiRW50ZXIiKSB7DQogICAgICAgICRpbmZvQ2hlY2tCb3guQ2hlY2tlZCA9ICEkaW5mb0NoZWNrQm94LkNoZWNrZWQNCiAgICB9DQp9KQ0KDQokbWVudS5Db250cm9scy5hZGQoJGluZm9DaGVja0JveCkNCg0KDQokaW5zdGFsbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQokaW5zdGFsbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxNDApDQokaW5zdGFsbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiRpbnN0YWxsLlRleHQgPSAiSW5zdGFsbCINCiRpbnN0YWxsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokaW5zdGFsbC5BZGRfQ2xpY2soe2luc3RhbGx9KQ0KJG1lbnUuQ29udHJvbHMuQWRkKCRpbnN0YWxsKQ0KDQokY3JlZGl0cyA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiRjcmVkaXRzLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDUsMzI1KQ0KJGNyZWRpdHMuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwMCkNCiRjcmVkaXRzLlRleHQgPSAiRWNobyBSZWxheSBDcmVhdGVkIGJ5OiBYZW5vbWVnYWBuSW5zdGFsbGVyIENyZWF0ZWQgYnk6QWxkaW4xMDEiDQokY3JlZGl0cy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRjcmVkaXRzKQ0KDQokbWVudS5TaG93RGlhbG9nKCkNCg0K"
}
