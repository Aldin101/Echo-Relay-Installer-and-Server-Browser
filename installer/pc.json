{
  "Script": "JFByb2dyZXNzUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJw0KZnVuY3Rpb24gRGVjb21wcmVzcy1abGliRmlsZSB7DQogICAgcGFyYW0oDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kSW5wdXRQYXRoLA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJE91dHB1dFBhdGgNCiAgICApDQoNCiAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5JTy5Db21wcmVzc2lvbg0KDQogICAgJGlucHV0ID0gTmV3LU9iamVjdCBTeXN0ZW0uSU8uRmlsZVN0cmVhbSgkSW5wdXRQYXRoLCBbU3lzdGVtLklPLkZpbGVNb2RlXTo6T3BlbiwgW1N5c3RlbS5JTy5GaWxlQWNjZXNzXTo6UmVhZCkNCiAgICAkb3V0cHV0ID0gTmV3LU9iamVjdCBTeXN0ZW0uSU8uRmlsZVN0cmVhbSgkT3V0cHV0UGF0aCwgW1N5c3RlbS5JTy5GaWxlTW9kZV06OkNyZWF0ZSwgW1N5c3RlbS5JTy5GaWxlQWNjZXNzXTo6V3JpdGUpDQoNCiAgICAkaW5wdXQuUmVhZEJ5dGUoKSB8IE91dC1OdWxsDQogICAgJGlucHV0LlJlYWRCeXRlKCkgfCBPdXQtTnVsbA0KDQogICAgJGRlZmxhdGVTdHJlYW0gPSBOZXctT2JqZWN0IFN5c3RlbS5JTy5Db21wcmVzc2lvbi5EZWZsYXRlU3RyZWFtKCRpbnB1dCwgW1N5c3RlbS5JTy5Db21wcmVzc2lvbi5Db21wcmVzc2lvbk1vZGVdOjpEZWNvbXByZXNzKQ0KDQogICAgJGJ1ZmZlciA9IE5ldy1PYmplY3QgYnl0ZVtdKDEwMjQpDQogICAgd2hpbGUgKCgkcmVhZCA9ICRkZWZsYXRlU3RyZWFtLlJlYWQoJGJ1ZmZlciwgMCwgJGJ1ZmZlci5MZW5ndGgpKSAtZ3QgMCkgew0KICAgICAgICAkb3V0cHV0LldyaXRlKCRidWZmZXIsIDAsICRyZWFkKQ0KICAgIH0NCg0KICAgICRkZWZsYXRlU3RyZWFtLkNsb3NlKCkNCiAgICAkb3V0cHV0LkNsb3NlKCkNCiAgICAkaW5wdXQuQ2xvc2UoKQ0KfQ0KDQpmdW5jdGlvbiBSZWFkLUZvbGRlckJyb3dzZXJEaWFsb2coW3N0cmluZ10kTWVzc2FnZSwgW3N0cmluZ10kSW5pdGlhbERpcmVjdG9yeSkgew0KICAgICRhcHAgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgU2hlbGwuQXBwbGljYXRpb24NCiAgICAkZm9sZGVyID0gJGFwcC5Ccm93c2VGb3JGb2xkZXIoMCwgJE1lc3NhZ2UsIDAsICRJbml0aWFsRGlyZWN0b3J5KQ0KICAgIGlmICgkZm9sZGVyKSB7IHJldHVybiAkZm9sZGVyLlNlbGYuUGF0aCB9IGVsc2UgeyByZXR1cm4gJ0M6XFByb2dyYW0gRmlsZXNcT2N1bHVzXFNvZnR3YXJlJyB9DQp9DQoNCmZ1bmN0aW9uIGRvd25ncmFkZSB7DQoNCiAgICAkZG93bmdyYWRlTWVudSA9IG5ldy1vYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICRkb3duZ3JhZGVNZW51LnRleHQgPSAiRG93bmdyYWRlciINCiAgICAkZG93bmdyYWRlTWVudS5JY29uID0gW1N5c3RlbS5EcmF3aW5nLkljb25dOjpFeHRyYWN0QXNzb2NpYXRlZEljb24oJGZpbGVMb2NhdGlvbjEpDQogICAgJGRvd25ncmFkZU1lbnUuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoMjQwLCAyMDApDQogICAgJGRvd25ncmFkZU1lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQogICAgJGRvd25ncmFkZU1lbnUuRm9ybUJvcmRlclN0eWxlID0gIkZpeGVkRGlhbG9nIg0KICAgICRkb3duZ3JhZGVNZW51LnNob3dJblRhc2tiYXIgPSAkZmFsc2UNCiAgICAkZG93bmdyYWRlTWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KDQogICAgJGRvd25ncmFkZUxhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRkb3duZ3JhZGVMYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMCkNCiAgICAkZG93bmdyYWRlTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQogICAgJGRvd25ncmFkZUxhYmVsLlRleHQgPSAiRWNobyBOYXZpZ2F0b3IgRG93bmdyYWRlciINCiAgICAkZG93bmdyYWRlTGFiZWwuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMiINCiAgICAkZG93bmdyYWRlTGFiZWwuVGV4dEFsaWduID0gIk1pZGRsZUNlbnRlciINCiAgICAkZG93bmdyYWRlTWVudS5Db250cm9scy5BZGQoJGRvd25ncmFkZUxhYmVsKQ0KDQogICAgJHNlZ21lbnRMYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAkc2VnbWVudExhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDcwKQ0KICAgICRzZWdtZW50TGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQogICAgJHNlZ21lbnRMYWJlbC5UZXh0ID0gIkRvd25sb2FkZWQgU2VnbWVudHMiDQogICAgJHNlZ21lbnRMYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRzZWdtZW50TGFiZWwuVmlzaWJsZSA9ICRmYWxzZQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkc2VnbWVudExhYmVsKQ0KDQogICAgJHNlZ21lbnRQcm9ncmVzcyA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuUHJvZ3Jlc3NCYXINCiAgICAkc2VnbWVudFByb2dyZXNzLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDkwKQ0KICAgICRzZWdtZW50UHJvZ3Jlc3MuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMTUpDQogICAgJHNlZ21lbnRQcm9ncmVzcy5TdHlsZSA9ICJDb250aW51b3VzIg0KICAgICRzZWdtZW50UHJvZ3Jlc3MuTWF4aW11bSA9IDEwMA0KICAgICRzZWdtZW50UHJvZ3Jlc3MuVmFsdWUgPSAwDQogICAgJHNlZ21lbnRQcm9ncmVzcy5WaXNpYmxlID0gJGZhbHNlDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRzZWdtZW50UHJvZ3Jlc3MpDQoNCiAgICAkc2l6ZUxhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRzaXplTGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTEwKQ0KICAgICRzaXplTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQogICAgJHNpemVMYWJlbC5UZXh0ID0gIkRvd25sb2FkZWQgU2l6ZSINCiAgICAkc2l6ZUxhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJHNpemVMYWJlbC5WaXNpYmxlID0gJGZhbHNlDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRzaXplTGFiZWwpDQoNCiAgICAkc2l6ZVByb2dyZXNzID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0Jhcg0KICAgICRzaXplUHJvZ3Jlc3MuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTMwKQ0KICAgICRzaXplUHJvZ3Jlc3MuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMTUpDQogICAgJHNpemVQcm9ncmVzcy5TdHlsZSA9ICJDb250aW51b3VzIg0KICAgICRzaXplUHJvZ3Jlc3MuTWF4aW11bSA9IDEwMA0KICAgICRzaXplUHJvZ3Jlc3MuVmFsdWUgPSAwDQogICAgJHNpemVQcm9ncmVzcy5WaXNpYmxlID0gJGZhbHNlDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRzaXplUHJvZ3Jlc3MpDQoNCg0KICAgICRkb3duZ3JhZGVCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRkb3duZ3JhZGVCdXR0b24uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNDApDQogICAgJGRvd25ncmFkZUJ1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkZG93bmdyYWRlQnV0dG9uLlRleHQgPSAiRG93bmdyYWRlIg0KICAgICRkb3duZ3JhZGVCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkZG93bmdyYWRlQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICRkb3duZ3JhZGVCdXR0b24uZW5hYmxlZCA9ICRmYWxzZQ0KICAgICAgICAkZm9sZGVyUGlja2VyLmVuYWJsZWQgPSAkZmFsc2UNCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi50ZXh0ID0gIlByZXBhcmluZyBXZWJEcml2ZXIuLi4iDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24uUmVmcmVzaCgpDQogICAgICAgIEluc3RhbGwtUGFja2FnZVByb3ZpZGVyIE51R2V0IC1TY29wZSBDdXJyZW50VXNlciAtRm9yY2UNCiAgICAgICAgSW5zdGFsbC1Nb2R1bGUgLU5hbWUgU2VsZW5pdW0gLVNjb3BlIEN1cnJlbnRVc2VyIC1Db25maXJtOiRmYWxzZSAtRm9yY2UNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICRmaXJlZm94ID0gU3RhcnQtU2VGaXJlZm94DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi50ZXh0ID0gIkRvd25sb2FkaW5nIGZpcmVmb3guLi4iDQogICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KDQogICAgICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtdXJpICJodHRwczovL2Rvd25sb2FkLm1vemlsbGEub3JnLz9wcm9kdWN0PWZpcmVmb3gtbGF0ZXN0LXNzbCZvcz13aW42NCZsYW5nPWVuLVVTIiAtT3V0RmlsZSAiJGVudjp0ZW1wXGZpcmVmb3guZXhlIg0KICAgICAgICAgICAgd2hpbGUgKDEpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBzdGFydC1wcm9jZXNzICIkZW52OnRlbXBcZmlyZWZveC5leGUiIC1Bcmd1bWVudExpc3QgIi9TIiAtdmVyYiBSdW5BcyAtV2FpdA0KICAgICAgICAgICAgICAgICAgICAkZmlyZWZveCA9IFN0YXJ0LVNlRmlyZWZveA0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgICAgICAgICAkY2hvaWNlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJQbGVhc2UgYWNjZXB0IHRoZSBhZG1pbiBwcm9tcHQgdG8gaW5zdGFsbCBGaXJlZm94LmBuYG5ObyBwcm9tcHQ/IFRyeSBpbnN0YWxsaW5nIG1hbnVhbGx5LiIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwiUmV0cnlDYW5jZWwiLCAiRXJyb3IiKQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJGNob2ljZSAtZXEgIkNhbmNlbCIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJUcnkgYWdhaW4iDQogICAgICAgICAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLmVuYWJsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgJGZvbGRlclBpY2tlci5lbmFibGVkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICRmaXJlZm94Lk5hdmlnYXRlKCkuR29Ub1VybCgiaHR0cHM6Ly9hdXRoLm9jdWx1cy5jb20vbG9naW4vP3JlZGlyZWN0X3VyaT1odHRwcyUzQSUyRiUyRmRldmVsb3Blci5vY3VsdXMuY29tJTJGbWFuYWdlJTJGIikNCiAgICAgICAgd2hpbGUgKCRmaXJlZm94LnVybCAtbm90bGlrZSAiaHR0cHM6Ly9kZXZlbG9wZXIub2N1bHVzLmNvbS9tYW5hZ2UvKiIpIHsNCiAgICAgICAgICAgIGlmICgkZmlyZWZveC51cmwgLWVxICRudWxsKSB7DQogICAgICAgICAgICAgICAgJGZpcmVmb3guUXVpdCgpDQogICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJZb3UgY2xvc2VkIHRoZSBicm93c2VyIHdpbmRvdyB3aXRob3V0IGxvZ2dpbmcgaW4uIFBsZWFzZSB0cnkgYWdhaW4uYG5gblRoZSBhY2NvdW50IGluZm9ybWF0aW9uIGVudGVyZWQgaXMgb25seSBldmVyIHVzZWQgdG8gZG93bmxvYWQgdGhlIGdhbWUuIElmIHlvdSB3aXNoIG5vdCB0byBlbnRlciB5b3VyIGFjY291bnQgaW5mb3JtYXRpb24geW91IHdpbGwgbmVlZCB0byB1c2UgYW50aGVyIG1ldGhvZCB0byBnZXQgRWNobyBSZWxheS4iLCAiRWNobyBOYXZpZ2F0b3IgRG93bmdyYWRlciIsIk9LIiwgIkVycm9yIikNCiAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiVHJ5IGFnYWluIg0KICAgICAgICAgICAgICAgICRkb3duZ3JhZGVCdXR0b24uZW5hYmxlZCA9ICR0cnVlDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQogICAgICAgIH0NCiAgICAgICAgJHRva2VuID0gJGZpcmVmb3guTWFuYWdlKCkuQ29va2llcy5HZXRDb29raWVOYW1lZCgib2Nfd3d3X2F0IikuVmFsdWUNCiAgICAgICAgJGZpcmVmb3guUXVpdCgpDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJEb3dubG9hZGluZy4uLiINCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi5SZWZyZXNoKCkNCiAgICAgICAgJGZvbGRlclBpY2tlci5WaXNpYmxlID0gJGZhbHNlDQogICAgICAgICRzZWdtZW50TGFiZWwuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRzZWdtZW50UHJvZ3Jlc3MuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRzaXplTGFiZWwuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRzaXplUHJvZ3Jlc3MuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRzZWdtZW50UHJvZ3Jlc3MuVmFsdWUgPSAwDQogICAgICAgICRzZWdtZW50UHJvZ3Jlc3MuUmVmcmVzaCgpDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtdXJpICJodHRwczovL3NlY3VyZWNkbi5vY3VsdXMuY29tL2JpbmFyaWVzL2Rvd25sb2FkLz9pZD02MzIzOTgzMjAxMDQ5NTQwJmFjY2Vzc190b2tlbj0kdG9rZW4mZ2V0X21hbmlmZXN0PTEiIC1PdXRGaWxlICIkZW52OnRlbXBcbWFuaWZlc3QuemlwIg0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6c2hvdygiRmFpbGVkIHRvIHN0YXJ0IGRvd25sb2FkLiBUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IHlvdSBub3Qgb3duaW5nIEVjaG8gVlIgb24gdGhlIGFjY291bnQgdG8gbG9nZ2VkIGluIHdpdGgsIG9yIGhhdmluZyBubyBpbnRlcm5ldC4iLCAiRWNobyBOYXZpZ2F0b3IgU2VydmVyIEJyb3dzZXIiLCJPSyIsICJFcnJvciIpDQogICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiVHJ5IGFnYWluIg0KICAgICAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi5lbmFibGVkID0gJHRydWUNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgIEV4cGFuZC1BcmNoaXZlIC1QYXRoICIkZW52OnRlbXBcbWFuaWZlc3QuemlwIiAtRGVzdGluYXRpb25QYXRoICIkZW52OnRlbXBcbWFuaWZlc3QiIC1mb3JjZQ0KICAgICAgICAkbWFuaWZlc3QgPSBnZXQtY29udGVudCAiJGVudjp0ZW1wXG1hbmlmZXN0XG1hbmlmZXN0Lmpzb24iIHwgY29udmVydGZyb20tanNvbg0KICAgICAgICByZW1vdmUtaXRlbSAiJGVudjp0ZW1wXG1hbmlmZXN0LnppcCINCiAgICAgICAgcmVtb3ZlLWl0ZW0gIiRlbnY6dGVtcFxtYW5pZmVzdCIgLXJlY3Vyc2UgLWZvcmNlDQogICAgICAgICRzZWdtZW50Q291bnQgPSAwDQogICAgICAgIGZvciAoJGk9MDsgJGkgLWx0ICQoJG1hbmlmZXN0LmZpbGVzIHwgZ2V0LW1lbWJlcikubmFtZS5jb3VudDsgJGkrKykgew0KICAgICAgICAgICAgJHNlZ21lbnRDb3VudCA9ICRzZWdtZW50Q291bnQgKyAkbWFuaWZlc3QuZmlsZXMuJCgkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWVbJGldKS5zZWdtZW50cy5jb3VudA0KICAgICAgICAgICAgJHRvdGFsU2l6ZSA9ICR0b3RhbFNpemUgKyAkbWFuaWZlc3QuZmlsZXMuJCgkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWVbJGldKS5zaXplDQogICAgICAgIH0NCiAgICAgICAgJHNlZ21lbnRzRG93bmxvYWRlZCA9IDANCiAgICAgICAgZm9yICgkaT0wOyAkaSAtbHQgJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lLmNvdW50OyAkaSsrKSB7DQogICAgICAgICAgICAkZm9sZGVyTmFtZSA9ICQoJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lWyRpXSkNCiAgICAgICAgICAgICRmb2xkZXJOYW1lID0gJGZvbGRlck5hbWUgLXNwbGl0ICJcXCINCiAgICAgICAgICAgICRmb2xkZXJOYW1lID0gJGZvbGRlck5hbWVbMC4uKCRmb2xkZXJOYW1lLkxlbmd0aCAtIDIpXQ0KICAgICAgICAgICAgJGZvbGRlck5hbWUgPSAkZm9sZGVyTmFtZSAtam9pbiAiXCINCiAgICAgICAgICAgIG1rZGlyICIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZ1wkZm9sZGVyTmFtZVwiIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICAkZmlsZVN0cmVhbSA9IE5ldy1PYmplY3QgU3lzdGVtLklPLkZpbGVTdHJlYW0oIiRnbG9iYWw6Z2FtZXBhdGhcLi5cZXZyLmRvd25sb2FkaW5nXCQoJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lWyRpXSkiLCBbU3lzdGVtLklPLkZpbGVNb2RlXTo6Q3JlYXRlLCBbU3lzdGVtLklPLkZpbGVBY2Nlc3NdOjpXcml0ZSkNCiAgICAgICAgICAgICRidWZmZXJTaXplID0gMTBLQg0KICAgICAgICAgICAgZm9yZWFjaCAoJHNlZ21lbnQgaW4gJG1hbmlmZXN0LmZpbGVzLiQoJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lWyRpXSkuc2VnbWVudHMpIHsNCiAgICAgICAgICAgICAgICAkdGFyZ2V0U3RyZWFtID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLklPLk1lbW9yeVN0cmVhbQ0KICAgICAgICAgICAgICAgICR1cmkgPSBOZXctT2JqZWN0ICJTeXN0ZW0uVXJpIiAiaHR0cHM6Ly9zZWN1cmVjZG4ub2N1bHVzLmNvbS9iaW5hcmllcy9zZWdtZW50Lz9hY2Nlc3NfdG9rZW49JHRva2VuJmJpbmFyeV9pZD02MzIzOTgzMjAxMDQ5NTQwJnNlZ21lbnRfc2hhMjU2PSQoJHNlZ21lbnRbMV0pIg0KICAgICAgICAgICAgICAgICRjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuSHR0cC5IdHRwQ2xpZW50DQogICAgICAgICAgICAgICAgJHJlc3BvbnNlID0gJGNsaWVudC5HZXRBc3luYygkdXJpKS5SZXN1bHQNCiAgICAgICAgICAgICAgICAkcmVzcG9uc2VTdHJlYW0gPSAkcmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJlYW1Bc3luYygpLlJlc3VsdA0KICAgICAgICAgICAgICAgICRyZXNwb25zZVN0cmVhbS5Db3B5VG8oJHRhcmdldFN0cmVhbSwgJGJ1ZmZlclNpemUpDQogICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5Qb3NpdGlvbiA9IDANCiAgICAgICAgICAgICAgICAkdGFyZ2V0U3RyZWFtLlNldExlbmd0aCgkdGFyZ2V0U3RyZWFtLkxlbmd0aCAtIDQpDQogICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5Qb3NpdGlvbiA9IDINCiAgICAgICAgICAgICAgICAkZGVmbGF0ZVN0cmVhbSA9IE5ldy1PYmplY3QgU3lzdGVtLklPLkNvbXByZXNzaW9uLkRlZmxhdGVTdHJlYW0oJHRhcmdldFN0cmVhbSwgW1N5c3RlbS5JTy5Db21wcmVzc2lvbi5Db21wcmVzc2lvbk1vZGVdOjpEZWNvbXByZXNzKQ0KICAgICAgICAgICAgICAgICRkZWZsYXRlU3RyZWFtLkNvcHlUbygkZmlsZVN0cmVhbSwgJGJ1ZmZlclNpemUpDQogICAgICAgICAgICAgICAgJGRlZmxhdGVTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICR0YXJnZXRTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICRyZXNwb25zZVN0cmVhbS5DbG9zZSgpDQogICAgICAgICAgICAgICAgJHNlZ21lbnRzRG93bmxvYWRlZCsrDQogICAgICAgICAgICAgICAgJHNlZ21lbnRQcm9ncmVzcy52YWx1ZSA9ICgkc2VnbWVudHNEb3dubG9hZGVkIC8gJHNlZ21lbnRDb3VudCkgKiAxMDANCiAgICAgICAgICAgICAgICAkc2VnbWVudFByb2dyZXNzLlJlZnJlc2goKQ0KICAgICAgICAgICAgICAgICRzaXplUHJvZ3Jlc3MudmFsdWUgPSAoKChHZXQtQ2hpbGRJdGVtICIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZyIgLVJlY3Vyc2UgfCBNZWFzdXJlLU9iamVjdCAtUHJvcGVydHkgTGVuZ3RoIC1TdW0gLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUpLlN1bSArICRmaWxlU3RyZWFtLkxlbmd0aCkvICR0b3RhbFNpemUpICogMTAwDQogICAgICAgICAgICAgICAgJHNpemVQcm9ncmVzcy5SZWZyZXNoKCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRmaWxlU3RyZWFtLkNsb3NlKCkNCiAgICAgICAgfQ0KICAgICAgICAkc2VnbWVudExhYmVsLlZpc2libGUgPSAkZmFsc2UNCiAgICAgICAgJHNpemVMYWJlbC5WaXNpYmxlID0gJGZhbHNlDQogICAgICAgICRzaXplUHJvZ3Jlc3MuVmlzaWJsZSA9ICRmYWxzZQ0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiVmVyaWZ5aW5nLi4uIg0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KDQogICAgICAgIGZvciAoJGk9MDsgJGkgLWx0ICQoJG1hbmlmZXN0LmZpbGVzIHwgZ2V0LW1lbWJlcikubmFtZS5jb3VudDsgJGkrKykgew0KICAgICAgICAgICAgJGhhc2ggPSAoR2V0LUZpbGVIYXNoIC1QYXRoICIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZ1wkKCQoJG1hbmlmZXN0LmZpbGVzIHwgZ2V0LW1lbWJlcikubmFtZVskaV0pIiAtQWxnb3JpdGhtIFNIQTI1NikuaGFzaA0KICAgICAgICAgICAgaWYgKCRoYXNoIC1uZSAkbWFuaWZlc3QuZmlsZXMuJCgkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWVbJGldKS5zaGEyNTYpIHsNCiAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiRG93bmxvYWRpbmcuLi4iDQogICAgICAgICAgICAgICAgJGZpbGVTdHJlYW0gPSBOZXctT2JqZWN0IFN5c3RlbS5JTy5GaWxlU3RyZWFtKCIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZ1wkKCQoJG1hbmlmZXN0LmZpbGVzIHwgZ2V0LW1lbWJlcikubmFtZVskaV0pIiwgW1N5c3RlbS5JTy5GaWxlTW9kZV06OkNyZWF0ZSwgW1N5c3RlbS5JTy5GaWxlQWNjZXNzXTo6V3JpdGUpDQogICAgICAgICAgICAgICAgJGJ1ZmZlclNpemUgPSAxMEtCDQogICAgICAgICAgICAgICAgJHNlZ21lbnRzRG93bmxvYWRlZCA9IDANCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkc2VnbWVudCBpbiAkbWFuaWZlc3QuZmlsZXMuJCgkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWVbJGldKS5zZWdtZW50cykgew0KICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0U3RyZWFtID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLklPLk1lbW9yeVN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAkdXJpID0gTmV3LU9iamVjdCAiU3lzdGVtLlVyaSIgImh0dHBzOi8vc2VjdXJlY2RuLm9jdWx1cy5jb20vYmluYXJpZXMvc2VnbWVudC8/YWNjZXNzX3Rva2VuPSR0b2tlbiZiaW5hcnlfaWQ9NjMyMzk4MzIwMTA0OTU0MCZzZWdtZW50X3NoYTI1Nj0kKCRzZWdtZW50WzFdKSINCiAgICAgICAgICAgICAgICAgICAgJGNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5IdHRwLkh0dHBDbGllbnQNCiAgICAgICAgICAgICAgICAgICAgJHJlc3BvbnNlID0gJGNsaWVudC5HZXRBc3luYygkdXJpKS5SZXN1bHQNCiAgICAgICAgICAgICAgICAgICAgJHJlc3BvbnNlU3RyZWFtID0gJHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyZWFtQXN5bmMoKS5SZXN1bHQNCiAgICAgICAgICAgICAgICAgICAgJHJlc3BvbnNlU3RyZWFtLkNvcHlUbygkdGFyZ2V0U3RyZWFtLCAkYnVmZmVyU2l6ZSkNCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5Qb3NpdGlvbiA9IDANCiAgICAgICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5TZXRMZW5ndGgoJHRhcmdldFN0cmVhbS5MZW5ndGggLSA0KQ0KICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0U3RyZWFtLlBvc2l0aW9uID0gMg0KICAgICAgICAgICAgICAgICAgICAkZGVmbGF0ZVN0cmVhbSA9IE5ldy1PYmplY3QgU3lzdGVtLklPLkNvbXByZXNzaW9uLkRlZmxhdGVTdHJlYW0oJHRhcmdldFN0cmVhbSwgW1N5c3RlbS5JTy5Db21wcmVzc2lvbi5Db21wcmVzc2lvbk1vZGVdOjpEZWNvbXByZXNzKQ0KICAgICAgICAgICAgICAgICAgICAkZGVmbGF0ZVN0cmVhbS5Db3B5VG8oJGZpbGVTdHJlYW0sICRidWZmZXJTaXplKQ0KICAgICAgICAgICAgICAgICAgICAkZGVmbGF0ZVN0cmVhbS5DbG9zZSgpDQogICAgICAgICAgICAgICAgICAgICR0YXJnZXRTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAkcmVzcG9uc2VTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgICAgICAgICAkc2VnbWVudHNEb3dubG9hZGVkKysNCiAgICAgICAgICAgICAgICAgICAgJHNlZ21lbnRQcm9ncmVzcy52YWx1ZSA9ICgkc2VnbWVudHNEb3dubG9hZGVkIC8gJG1hbmlmZXN0LmZpbGVzLiQoJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lWyRpXSkuc2VnbWVudHMuY291bnQpICogMTAwDQogICAgICAgICAgICAgICAgICAgICRzZWdtZW50UHJvZ3Jlc3MuUmVmcmVzaCgpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRmaWxlU3RyZWFtLkNsb3NlKCkNCiAgICAgICAgICAgICAgICAkaGFzaCA9IChHZXQtRmlsZUhhc2ggLVBhdGggIiRnbG9iYWw6Z2FtZXBhdGhcLi5cZXZyLmRvd25sb2FkaW5nXCQoJCgkbWFuaWZlc3QuZmlsZXMgfCBnZXQtbWVtYmVyKS5uYW1lWyRpXSkiIC1BbGdvcml0aG0gU0hBMjU2KS5oYXNoDQogICAgICAgICAgICAgICAgaWYgKCRoYXNoIC1uZSAkbWFuaWZlc3QuZmlsZXMuJCgkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWVbJGldKS5zaGEyNTYpIHsNCiAgICAgICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJUaGUgZG93bmxvYWQgd2FzIGNvcnJ1cHQgZXZlbiBhZnRlciBhIHNlY29uZCBkb3dubG9hZCBhdHRlbXB0LiBQbGVhc2UgdHJ5IGFnYWluLiIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwiT0siLCAiRXJyb3IiKQ0KICAgICAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiVHJ5IGFnYWluIg0KICAgICAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLmVuYWJsZWQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiVmVyaWZ5aW5nLi4uIg0KICAgICAgICAgICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRzZWdtZW50UHJvZ3Jlc3MudmFsdWUgPSAoJGkgLyAkKCRtYW5pZmVzdC5maWxlcyB8IGdldC1tZW1iZXIpLm5hbWUuY291bnQpICogMTAwDQogICAgICAgICAgICAkc2VnbWVudFByb2dyZXNzLlJlZnJlc2goKQ0KICAgICAgICB9DQogICAgICAgICRzZWdtZW50UHJvZ3Jlc3MuVmlzaWJsZSA9ICRmYWxzZQ0KICAgICAgICAkZm9sZGVyUGlja2VyLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICAkdG9rZW4gPSAkbnVsbA0KDQogICAgICAgIHJtZGlyICIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZ1xFcXVhbHMiIC1yZWN1cnNlIC1mb3JjZQ0KICAgICAgICBybWRpciAiJGdsb2JhbDpnYW1lcGF0aFwuLlxldnIuZG93bmxvYWRpbmdcR2V0SGFzaENvZGUiIC1yZWN1cnNlIC1mb3JjZQ0KICAgICAgICBybWRpciAiJGdsb2JhbDpnYW1lcGF0aFwuLlxldnIuZG93bmxvYWRpbmdcR2V0VHlwZSIgLXJlY3Vyc2UgLWZvcmNlDQogICAgICAgIHJtZGlyICIkZ2xvYmFsOmdhbWVwYXRoXC4uXGV2ci5kb3dubG9hZGluZ1xUb1N0cmluZyIgLXJlY3Vyc2UgLWZvcmNlDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJGaW5pc2hlZCEiDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24uUmVmcmVzaCgpDQogICAgICAgICRjaG9pY2UgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIldvdWxkIHlvdSBsaWtlIHRvIGRlbGV0ZSB5b3VyIG9sZCBpbnN0YWxsPyIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06OlF1ZXN0aW9uKQ0KICAgICAgICBpZiAoJGNob2ljZSAtZXEgIlllcyIpIHsNCiAgICAgICAgICAgIHJlbW92ZS1pdGVtICRnbG9iYWw6Z2FtZVBhdGggLXJlY3Vyc2UgLWZvcmNlDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZW5hbWUtaXRlbSAkZ2xvYmFsOmdhbWVQYXRoICIkZ2xvYmFsOmdhbWVQYXRoLm9sZCINCiAgICAgICAgfQ0KICAgICAgICByZW5hbWUtaXRlbSAiJGdsb2JhbDpnYW1lcGF0aFwuLlxldnIuZG93bmxvYWRpbmdcIiAicmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hIiAtZm9yY2UNCiAgICAgICAgc3RhcnQtc2xlZXAgLXMgMg0KICAgICAgICAkZG93bmdyYWRlTWVudS5DbG9zZSgpDQogICAgfSkNCiAgICAkZG93bmdyYWRlTWVudS5Db250cm9scy5BZGQoJGRvd25ncmFkZUJ1dHRvbikNCg0KICAgICRmb2xkZXJQaWNrZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRmb2xkZXJQaWNrZXIuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsODApDQogICAgJGZvbGRlclBpY2tlci5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkZm9sZGVyUGlja2VyLlRleHQgPSAiVGFyZ2V0IGZvbGRlciINCiAgICAkZm9sZGVyUGlja2VyLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGZvbGRlclBpY2tlci5BZGRfQ2xpY2soew0KICAgICAgICAkbG9jYXRpb25zID0gR2V0LUNoaWxkSXRlbSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wqIg0KICAgICAgICAkbG9jYXRpb25MaXN0ID0gW1N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdQCgpDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25zKSB7DQogICAgICAgICAgICAkbG9jYXRpb25MaXN0LkFkZCgkKEdldC1JdGVtUHJvcGVydHkgIkhLQ1U6XFNPRlRXQVJFXE9jdWx1cyBWUiwgTExDXE9jdWx1c1xMaWJyYXJpZXNcJCgkbG9jYXRpb24uUFNDaGlsZE5hbWUpIiAtTmFtZSBPcmlnaW5hbFBhdGggfCBzZWxlY3QgLUV4cGFuZFByb3BlcnR5IE9yaWdpbmFsUGF0aCkpDQogICAgICAgIH0NCiAgICAgICAgJGk9MA0KICAgICAgICBmb3JlYWNoICgkbG9jYXRpb24gaW4gJGxvY2F0aW9uTGlzdCkgew0KICAgICAgICAgICAgaWYgKHRlc3QtcGF0aCAiJGxvY2F0aW9uXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYVxiaW5cd2luMTBcZWNob3ZyLmV4ZSIpIHsNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGkrKw0KICAgICAgICB9DQogICAgICAgICRwaWNrTWVudSA9IG5ldy1vYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICAgICAkcGlja01lbnUudGV4dCA9ICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIg0KICAgICAgICAkcGlja01lbnUuSWNvbiA9IFtTeXN0ZW0uRHJhd2luZy5JY29uXTo6RXh0cmFjdEFzc29jaWF0ZWRJY29uKCRmaWxlTG9jYXRpb24xKQ0KICAgICAgICAkcGlja01lbnUuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoMzIwLCAyNzApDQogICAgICAgICRwaWNrTWVudS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCiAgICAgICAgJHBpY2tNZW51LkZvcm1Cb3JkZXJTdHlsZSA9ICJGaXhlZERpYWxvZyINCiAgICAgICAgJHBpY2tNZW51Lk1heGltaXplQm94ID0gJGZhbHNlDQogICAgICAgICRwaWNrTWVudS5TaG93SW5UYXNrYmFyID0gJGZhbHNlDQoNCiAgICAgICAgJHBpY2tMYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAgICAgJHBpY2tMYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMCkNCiAgICAgICAgJHBpY2tMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwyMCkNCiAgICAgICAgJHBpY2tMYWJlbC5UZXh0ID0gIlNlbGVjdCBmb2xkZXIgdG8gZG93bmxvYWQgRWNobyBWUiBpbnRvIg0KICAgICAgICAkcGlja0xhYmVsLlRleHRBbGlnbiA9ICJNaWRkbGVDZW50ZXIiDQogICAgICAgICRwaWNrTGFiZWwuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tNZW51LkNvbnRyb2xzLkFkZCgkcGlja0xhYmVsKQ0KDQogICAgICAgICRwaWNrTGlzdCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGlzdEJveA0KICAgICAgICAkcGlja0xpc3QuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMzApDQogICAgICAgICRwaWNrTGlzdC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwxMDApDQogICAgICAgICRwaWNrTGlzdC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkcGlja0xpc3QuRGF0YVNvdXJjZSA9ICRsb2NhdGlvbkxpc3QNCiAgICAgICAgJHBpY2tMaXN0LlNlbGVjdGVkSW5kZXggPSAkaQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrTGlzdCkNCg0KICAgICAgICAkY3VzdG9tUGF0aCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgICAgICRjdXN0b21QYXRoLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDE0MCkNCiAgICAgICAgJGN1c3RvbVBhdGguU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMzApDQogICAgICAgICRjdXN0b21QYXRoLlRleHQgPSAiQ3VzdG9tIFBhdGgiDQogICAgICAgICRjdXN0b21QYXRoLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRjdXN0b21QYXRoLkFkZF9DbGljayh7DQogICAgICAgICAgICAkY2hvaWNlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSB1c2UgdGhlIHByZS1zZWxlY3RlZCBmb2xkZXIgc28gdGhhdCB0aGUgT2N1bHVzIGFwcCBsYXVuY2hlcyB0aGUgZG93bmdyYWRlZCB2ZXJzaW9uIG9mIHRoZSBnYW1lLmBuYG5gV2hpbGUgeW91IGNhbiB1c2UgYSBjdXN0b20gcGF0aCBpdCBpcyBub3QgcmVjb21tZW5kZWQuIFdvdWxkIHlvdSBzdGlsbCBsaWtlIHRvIHVzZSBhIGN1c3RvbSBwYXRoPyIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICBpZiAoJGNob2ljZSAtZXEgIk5vIikgew0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGdsb2JhbDpnYW1lUGF0aCA9IFJlYWQtRm9sZGVyQnJvd3NlckRpYWxvZyAtTWVzc2FnZSAiU2VsZWN0IHRoZSBmb2xkZXIgeW91IHdhbnQgdG8gaW5zdGFsbCBFY2hvIFZSIGludG8iDQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRjdXN0b21QYXRoKQ0KDQogICAgICAgICRwaWNrQnV0dG9uID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAgICAgJHBpY2tCdXR0b24uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTgwKQ0KICAgICAgICAkcGlja0J1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwzMCkNCiAgICAgICAgJHBpY2tCdXR0b24uVGV4dCA9ICJTZWxlY3QiDQogICAgICAgICRwaWNrQnV0dG9uLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICAgICBpZiAoJHBpY2tsaXN0LlNlbGVjdGVkSW5kZXggLW5lICRpKSB7DQogICAgICAgICAgICAgICAgJGNob2ljZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6c2hvdygiSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlIHRoZSBwcmUtc2VsZWN0ZWQgZm9sZGVyIHNvIHRoYXQgdGhlIE9jdWx1cyBhcHAgbGF1bmNoZXMgdGhlIGRvd25ncmFkZWQgdmVyc2lvbiBvZiB0aGUgZ2FtZS5gbmBuYFdoaWxlIHlvdSBjYW4gc3RpbGwgcGljayB0aGlzIGZvbGRlciBpdCBpcyBub3QgcmVjb21tZW5kZWQuIFdvdWxkIHlvdSBzdGlsbCBsaWtlIHRvIHVzZSB0aGUgc2VsZWN0ZWQgZm9sZGVyPyIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJObyIpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGdsb2JhbDpnYW1lUGF0aCA9ICIkKCRwaWNrTGlzdC5TZWxlY3RlZEl0ZW0pXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYSINCiAgICAgICAgICAgICRwaWNrTWVudS5DbG9zZSgpDQogICAgICAgIH0pDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tCdXR0b24pDQoNCiAgICAgICAgJHBpY2tNZW51LlNob3dEaWFsb2coKQ0KICAgIH0pDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRmb2xkZXJQaWNrZXIpDQoNCiAgICAkZG93bmdyYWRlTWVudS5TaG93RGlhbG9nKCkNCiAgICAkbWVudS5TaG93KCkNCn0NCg0KDQpmdW5jdGlvbiBpbnN0YWxsIHsNCiAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVmlzaWJsZSA9ICRmYWxzZQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtZXEgIiIgLW9yICRwYXNzd29yZEJveC50ZXh0IC1lcSAiIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQbGVhc2UgZW50ZXIgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dC5MZW5ndGggLWx0IDgpIHsNCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlRleHQgPSAiUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlthLXpdIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBsZXR0ZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkcGFzc3dvcmRCb3guVGV4dCAtbm90bWF0Y2ggIlswLTldIikgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMSBudW1iZXIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICgkdXNlcm5hbWVCb3gudGV4dCAtbWF0Y2ggIiAiIC1vciAkcGFzc3dvcmRCb3gudGV4dCAtbWF0Y2ggIiAiKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlVzZXJuYW1lIGFuZCBQYXNzd29yZCBjYW5ub3QgY29udGFpbiBzcGFjZXMiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmICghKHRlc3QtcGF0aCAkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlKSkgew0KICAgICAgICAkY2hvaWNlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgZ2FtZSBmb2xkZXIgb3IgaW5zdGFsbCB0aGUgZ2FtZS5gbmBuRG9uJ3QgaGF2ZSB0aGUgZ2FtZSBpbnN0YWxsZWQ/IENsaWNrIFllcyB0byBpbnN0YWxsIGl0LiIsICJFY2hvIE5hdmlnYXRvciBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpZZXNObywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJZZXMiKSB7DQogICAgICAgICAgICBkb3duZ3JhZGUNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgIGlmICghKHRlc3QtcGF0aCAkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlKSkgew0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJUaGUgZ2FtZSB3YXMgbm90IGluc3RhbGxlZCIsICJFY2hvIE5hdmlnYXRvciBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6RXJyb3IpDQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKCRpbmZvQ2hlY2tCb3guQ2hlY2tlZCAtZXEgJGZhbHNlKSB7DQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIlJlZCINCiAgICAgICAgc3RhcnQtc2xlZXAgLU1pbGxpc2Vjb25kcyAxNTANCiAgICAgICAgJGluZm9MYWJlbC5Gb3JlQ29sb3IgPSAiQmxhY2siDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIlJlZCINCiAgICAgICAgc3RhcnQtc2xlZXAgLU1pbGxpc2Vjb25kcyAxNTANCiAgICAgICAgJGluZm9MYWJlbC5Gb3JlQ29sb3IgPSAiQmxhY2siDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIlJlZCINCiAgICAgICAgc3RhcnQtc2xlZXAgLU1pbGxpc2Vjb25kcyAxNTANCiAgICAgICAgJGluZm9MYWJlbC5Gb3JlQ29sb3IgPSAiQmxhY2siDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICBpZiAoIShUZXN0LVBhdGggJGVudjpsb2NhbGFwcGRhdGFccmFkLWJhY2t1cCkpIHsNCiAgICAgICAgQ29weS1JdGVtICIkZW52OmxvY2FsYXBwZGF0YVxyYWQiICIkZW52OmxvY2FsYXBwZGF0YVxyYWQtYmFja3VwIiAtUmVjdXJzZQ0KICAgIH0NCiAgICBpZiAoKEdldC1GaWxlSGFzaCAtUGF0aCAkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlKS5oYXNoIC1uZSAiQjZEMDgyNzdFNTg0NjkwMEM4MTAwNEI2NEIyOThERjZBQ0JBODM0QjY5NzAwQTY0MEI3NThCREE5NEE1MjA0MyIpIHsNCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlRleHQgPSAiWW91IGFyZSBvbiB0aGUgd3JvbmcgdmVyc2lvbiBvZiBFY2hvVlIiDQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgJGNob2ljZSA9IFtTeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94XTo6c2hvdygiWW91IGFyZSBvbiB0aGUgd3JvbmcgdmVyc2lvbiBvZiBFY2hvVlIsIHdvdWxkIHlvdSBsaWtlIHRvIGRvd25ncmFkZT8iICwgIkVjaG8gTmF2aWdhdG9yIEluc3RhbGxlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Olllc05vLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICBpZiAoJGNob2ljZSAtZXEgIlllcyIpIHsNCiAgICAgICAgICAgIGRvd25ncmFkZQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKChHZXQtRmlsZUhhc2ggLVBhdGggJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcZWNob3ZyLmV4ZSkuaGFzaCAtbmUgIkI2RDA4Mjc3RTU4NDY5MDBDODEwMDRCNjRCMjk4REY2QUNCQTgzNEI2OTcwMEE2NDBCNzU4QkRBOTRBNTIwNDMiKSB7DQogICAgICAgIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94XTo6U2hvdygiVGhlIGdhbWUgd2FzIG5vdCBkb3duZ3JhZGVkLCBwbGVhc2UgdHJ5IGFnYWluLiIsICJFY2hvIE5hdmlnYXRvciBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIG1rZGlyICIkZW52OmFwcGRhdGFcRWNob05hdmlnYXRvclwiDQogICAgJGNvbmZpZyA9IEB7fQ0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICd1c2VybmFtZScgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJCgkdXNlcm5hbWVCb3gudGV4dCkiDQogICAgJGNvbmZpZyB8IEFkZC1NZW1iZXIgLU5hbWUgJ3Bhc3N3b3JkJyAtVHlwZSBOb3RlUHJvcGVydHkgLVZhbHVlICIkKCRwYXNzd29yZEJveC50ZXh0KSINCiAgICAkY29uZmlnIHwgQWRkLU1lbWJlciAtTmFtZSAnZ2FtZVBhdGgnIC1UeXBlIE5vdGVQcm9wZXJ0eSAtVmFsdWUgIiQoJGdsb2JhbDpnYW1lUGF0aCkiDQogICAgJGNvbmZpZyB8IGNvbnZlcnR0by1qc29uIHwgc2V0LWNvbnRlbnQgIiRlbnY6YXBwZGF0YVxFY2hvTmF2aWdhdG9yXGNvbmZpZy5qc29uIg0KICAgIEludm9rZS1XZWJSZXF1ZXN0ICJodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvTmF2aWdhdG9yQVBJL0VjaG9OYXZpZ2F0b3IuZXhlIiAtT3V0RmlsZSAiJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcRWNob05hdmlnYXRvci5leGUiDQogICAgJFdzaFNoZWxsID0gTmV3LU9iamVjdCAtY29tT2JqZWN0IFdTY3JpcHQuU2hlbGwNCiAgICAkU2hvcnRjdXQgPSAkV3NoU2hlbGwuQ3JlYXRlU2hvcnRjdXQoIiRlbnY6VVNFUlBST0ZJTEVcRGVza3RvcFxFY2hvIE5hdmlnYXRvci5sbmsiKQ0KICAgICRTaG9ydGN1dC5UYXJnZXRQYXRoID0gIiRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXEVjaG9OYXZpZ2F0b3IuZXhlIg0KICAgICRTaG9ydGN1dC5TYXZlKCkNCiAgICBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveF06OlNob3coIkVjaG8gTmF2aWdhdG9yIGluc3RhbGxlZCFgbmBuU2VsZWN0IGEgc2VydmVyIHRvIGdldCBzdGFydGVkISIsICJFY2hvIE5hdmlnYXRvciBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6SW5mb3JtYXRpb24pDQogICAgc3RhcnQtcHJvY2VzcyAiJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcRWNob05hdmlnYXRvci5leGUiDQogICAgJG1lbnUuQ2xvc2UoKQ0KfQ0KDQoNCg0KDQpbcmVmbGVjdGlvbi5hc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoICJTeXN0ZW0uV2luZG93cy5Gb3JtcyIpDQpbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpFbmFibGVWaXN1YWxTdHlsZXMoKQ0KJG1lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCg0KJG1lbnUudGV4dCA9ICJFY2hvIE5hdmlnYXRvciBJbnN0YWxsZXIiDQokZmlsZUxvY2F0aW9uID0gR2V0LUNpbUluc3RhbmNlIFdpbjMyX1Byb2Nlc3MgLUZpbHRlciAibmFtZSA9ICdFY2hvIFJlbGF5IEluc3RhbGxlci5leGUnIiAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KJGZpbGVMb2NhdGlvbjEgPSAkZmlsZUxvY2F0aW9uLkNvbW1hbmRMaW5lIC1yZXBsYWNlICciJywgIiINCiRtZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiRtZW51LlNpemUgPSBOZXctT2JqZWN0IERyYXdpbmcuU2l6ZSBAKDYwMCwgNDAwKQ0KJG1lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQokbWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQokbWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KDQokbGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsOCkNCiRsYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyNSkNCiRsYWJlbC5UZXh0ID0gIkVjaG8gTmF2aWdhdG9yIEluc3RhbGxlciINCiRsYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEzIg0KJGxhYmVsLlRleHRBbGlnbiA9ICJNaWRkbGVMZWZ0Ig0KJG1lbnUuQ29udHJvbHMuQWRkKCRsYWJlbCkNCg0KJHVzZXJuYW1lID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJHVzZXJuYW1lLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDQwKQ0KJHVzZXJuYW1lLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHVzZXJuYW1lLlRleHQgPSAiVXNlcm5hbWUiDQokdXNlcm5hbWUuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRtZW51LkNvbnRyb2xzLkFkZCgkdXNlcm5hbWUpDQoNCiR1c2VybmFtZUJveCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVGV4dEJveA0KJHVzZXJuYW1lQm94LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDYwKQ0KJHVzZXJuYW1lQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHVzZXJuYW1lQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJHVzZXJuYW1lQm94KQ0KDQokcGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokcGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsOTApDQokcGFzc3dvcmQuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokcGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCINCiRwYXNzd29yZC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRwYXNzd29yZCkNCg0KJHBhc3N3b3JkQm94ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UZXh0Qm94DQokcGFzc3dvcmRCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTEwKQ0KJHBhc3N3b3JkQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KJHBhc3N3b3JkQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyID0gIioiDQokbWVudS5Db250cm9scy5BZGQoJHBhc3N3b3JkQm94KQ0KDQokc2hvd1Bhc3N3b3JkID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QaWN0dXJlQm94DQokc2hvd1Bhc3N3b3JkLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDE4OCwgMTExKQ0KJHNob3dQYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIxLCAyMSkNCiRzaG93UGFzc3dvcmQuU2l6ZU1vZGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuUGljdHVyZUJveFNpemVNb2RlXTo6U3RyZXRjaEltYWdlDQokc2hvd1Bhc3N3b3JkLkltYWdlTG9jYXRpb24gPSAiaHR0cHM6Ly9hbGRpbjEwMS5naXRodWIuaW8vRWNoby1SZWxheS1JbnN0YWxsZXIvZXllLnBuZyINCiRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6V2hpdGUNCiRzaG93UGFzc3dvcmQuQWRkX0NsaWNrKHsNCiAgICBpZiAoJHBhc3N3b3JkQm94LlBhc3N3b3JkQ2hhciAtZXEgIioiKSB7DQogICAgICAgICRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAkbnVsbA0KICAgICAgICAkc2hvd1Bhc3N3b3JkLkJhY2tDb2xvciA9IFtTeXN0ZW0uRHJhd2luZy5Db2xvcl06OkxpZ2h0Qmx1ZQ0KICAgICAgICAkdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJIaWRlIFBhc3N3b3JkIikNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyID0gIioiDQogICAgICAgICRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6V2hpdGUNCiAgICAgICAgJHRvb2xUaXAuU2V0VG9vbFRpcCgkc2hvd1Bhc3N3b3JkLCAiU2hvdyBQYXNzd29yZCIpDQogICAgfQ0KfSkNCiRzaG93UGFzc3dvcmQuQWRkX01vdXNlRW50ZXIoew0KICAgICRzaG93UGFzc3dvcmQuQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQm9yZGVyU3R5bGVdOjpGaXhlZFNpbmdsZQ0KfSkNCiRzaG93UGFzc3dvcmQuQWRkX01vdXNlTGVhdmUoew0KICAgICRzaG93UGFzc3dvcmQuQm9yZGVyU3R5bGUgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQm9yZGVyU3R5bGVdOjpOb25lDQp9KQ0KJG1lbnUuQ29udHJvbHMuQWRkKCRzaG93UGFzc3dvcmQpDQoNCiRzaG93UGFzc3dvcmQuQnJpbmdUb0Zyb250KCkNCg0KJHRvb2xUaXAgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRvb2xUaXANCiR0b29sVGlwLkF1dG9tYXRpY0RlbGF5ID0gNTAwDQokdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJTaG93IFBhc3N3b3JkIikNCg0KJG5vVXNlcm5hbWVPclBhc3N3b3JkID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDE3MCkNCiRub1VzZXJuYW1lT3JQYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIxMCwyMCkNCiRub1VzZXJuYW1lT3JQYXNzd29yZC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDgiDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQuRm9yZUNvbG9yID0gIlJlZCINCiRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJGZhbHNlDQokbWVudS5Db250cm9scy5BZGQoJG5vVXNlcm5hbWVPclBhc3N3b3JkKQ0KDQokaW5mb0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KJGluZm9MYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMjAsMTApDQokaW5mb0xhYmVsLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMzApDQokaW5mb0xhYmVsLlRleHQgPSAiVGhpcyBpbmZvcm1hdGlvbiBpcyBub3QgeW91ciBNZXRhIGxvZyBpbiwgaXQgaXMgeW91ciBhY2NvdW50YG5vbiBFY2hvIFJlbGF5IHNlcnZlcnMuIEJ1dCB5b3VyIGFjY291bnQgaW5mbyBpcyBzdGlsbCB0aWVkIHRvYG55b3VyIE1ldGEgYWNjb3VudCBhbmQgY2Fubm90IGJlIGNoYW5nZWQgbGF0ZXIuYG5JZiB5b3UgZm9yZ2V0IHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvbiBmb3IgYSBzZXJ2ZXIgcGxlYXNlYG5jb250YWN0IHRoZSBzZXJ2ZXIgaG9zdC5gbmBuVGhlcmUgaXMgbm8gY2hlY2sgZm9yIGlmIHlvdXIgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbmBuY2xhaW1lZCBhdCB0aGlzIHRpbWUuIElmIHlvdSByZWNlaXZlIGxvZ2luIGVycm9ycyBwbGVhc2VgbnRyeSBhIGRpZmZlcmVudCB1c2VybmFtZS5gbmBuRE8gTk9UIHVzZSB0aGUgc2FtZSBwYXNzd29yZCBmb3IgeW91IE1ldGEgYWNjb3VudCBvcmBuYW55IG90aGVyIG9ubGluZSBzZXJ2aWNlLiBXaGlsZSB1c2luZyB1bmlxdWUgcGFzc3dvcmRzIGZvcmBuYWxsIG9ubGluZSBzZXJ2aWNlcyBpcyBhbHdheXMgcmVjb21tZW5kZWQsIGl0IGlzIGVzcGVjaWFsbHlgbmltcG9ydGFudCBmb3IgRWNobyBSZWxheSBiZWNhdXNlIHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvbmBuaXMgbm90IHNlY3VyZWQuIg0KJGluZm9MYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRpbmZvTGFiZWwpDQoNCiRpbmZvQ2hlY2tCb3ggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkNoZWNrQm94DQokaW5mb0NoZWNrQm94LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIyMCwyNDApDQokaW5mb0NoZWNrQm94LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMCkNCiRpbmZvQ2hlY2tCb3guVGV4dCA9ICJJIGhhdmUgcmVhZCBhbmQgdW5kZXJzdGFuZCB0aGUgYWJvdmUgbm90aWNlIg0KJGluZm9DaGVja0JveC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KDQokaW5mb0NoZWNrQm94LkFkZF9LZXlEb3duKHsNCiAgICBpZiAoJF8uS2V5Q29kZSAtZXEgIkVudGVyIikgew0KICAgICAgICAkaW5mb0NoZWNrQm94LkNoZWNrZWQgPSAhJGluZm9DaGVja0JveC5DaGVja2VkDQogICAgfQ0KfSkNCg0KJG1lbnUuQ29udHJvbHMuYWRkKCRpbmZvQ2hlY2tCb3gpDQoNCg0KJGluc3RhbGwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KJGluc3RhbGwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTQwKQ0KJGluc3RhbGwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMzApDQokaW5zdGFsbC5UZXh0ID0gIkluc3RhbGwiDQokaW5zdGFsbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJGluc3RhbGwuQWRkX0NsaWNrKHtpbnN0YWxsfSkNCiRtZW51LkNvbnRyb2xzLkFkZCgkaW5zdGFsbCkNCg0KJGNyZWRpdHMgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokY3JlZGl0cy5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSg1LDMyNSkNCiRjcmVkaXRzLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMDApDQokY3JlZGl0cy5UZXh0ID0gIkVjaG8gTmF2aWdhdG9yIENyZWF0ZWQgQnk6IEFsZGluMTAxYG5PcmlnaW5hbCBFY2hvIFJlbGF5IENyZWF0ZWQgQnk6WGVub21lZ2EiDQokY3JlZGl0cy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRjcmVkaXRzKQ0KDQokY3VycmVudFBhdGggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQppZiAoISh0ZXN0LXBhdGggIkM6XFByb2dyYW0gRmlsZXNcT2N1bHVzXFNvZnR3YXJlXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYVxiaW5cd2luMTBcZWNob3ZyLmV4ZSIpKSB7DQogICAgJGN1cnJlbnRQYXRoLlRleHQgPSAiQ3VycmVudCBHYW1lIEZvbGRlcjpgblBsZWFzZSBTZWxlY3QgR2FtZSBGb2xkZXIiDQogICAgJHNlbGVjdEdhbWVGb2xkZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDIyMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5UZXh0ID0gIlNlbGVjdCBHYW1lIEZvbGRlciINCiAgICAkc2VsZWN0R2FtZUZvbGRlci5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkFkZF9DbGljayh7DQogICAgICAgICRsb2NhdGlvbnMgPSBHZXQtQ2hpbGRJdGVtICJIS0NVOlxTT0ZUV0FSRVxPY3VsdXMgVlIsIExMQ1xPY3VsdXNcTGlicmFyaWVzXCoiDQogICAgICAgICRsb2NhdGlvbkxpc3QgPSBbU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdF1AKCkNCiAgICAgICAgZm9yZWFjaCAoJGxvY2F0aW9uIGluICRsb2NhdGlvbnMpIHsNCiAgICAgICAgICAgICRsb2NhdGlvbkxpc3QuQWRkKCQoR2V0LUl0ZW1Qcm9wZXJ0eSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wkKCRsb2NhdGlvbi5QU0NoaWxkTmFtZSkiIC1OYW1lIE9yaWdpbmFsUGF0aCB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgT3JpZ2luYWxQYXRoKSkNCiAgICAgICAgfQ0KICAgICAgICAkbG9jYXRpb25zID0gW3N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdQCgpDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25MaXN0KSB7DQogICAgICAgICAgICBpZiAodGVzdC1wYXRoICIkbG9jYXRpb25cU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikgew0KICAgICAgICAgICAgICAgICRsb2NhdGlvbnMuQWRkKCRsb2NhdGlvbikNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkcGlja01lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAgICAgJHBpY2tNZW51LnRleHQgPSAiRWNobyBOYXZpZ2F0b3IgSW5zdGFsbGVyIg0KICAgICAgICAkcGlja01lbnUuSWNvbiA9IFtTeXN0ZW0uRHJhd2luZy5JY29uXTo6RXh0cmFjdEFzc29jaWF0ZWRJY29uKCRmaWxlTG9jYXRpb24xKQ0KICAgICAgICAkcGlja01lbnUuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoMzIwLCAyNzApDQogICAgICAgICRwaWNrTWVudS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCiAgICAgICAgJHBpY2tNZW51LkZvcm1Cb3JkZXJTdHlsZSA9ICJGaXhlZERpYWxvZyINCiAgICAgICAgJHBpY2tNZW51Lk1heGltaXplQm94ID0gJGZhbHNlDQogICAgICAgICRwaWNrTWVudS5TaG93SW5UYXNrYmFyID0gJGZhbHNlDQoNCiAgICAgICAgJHBpY2tMYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAgICAgJHBpY2tMYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMCkNCiAgICAgICAgJHBpY2tMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwyMCkNCiAgICAgICAgJHBpY2tMYWJlbC5UZXh0ID0gIlNlbGVjdCBmb2xkZXIgRWNobyBWUiBpcyBsb2NhdGVkIGluIg0KICAgICAgICAkcGlja0xhYmVsLlRleHRBbGlnbiA9ICJNaWRkbGVDZW50ZXIiDQogICAgICAgICRwaWNrTGFiZWwuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tNZW51LkNvbnRyb2xzLkFkZCgkcGlja0xhYmVsKQ0KDQogICAgICAgICRwaWNrTGlzdCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGlzdEJveA0KICAgICAgICAkcGlja0xpc3QuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMzApDQogICAgICAgICRwaWNrTGlzdC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwxMDApDQogICAgICAgICRwaWNrTGlzdC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkcGlja0xpc3QuRGF0YVNvdXJjZSA9ICRsb2NhdGlvbkxpc3QNCiAgICAgICAgJHBpY2tMaXN0LlNlbGVjdGVkSW5kZXggPSAkaQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrTGlzdCkNCg0KICAgICAgICAkY3VzdG9tUGF0aCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgICAgICRjdXN0b21QYXRoLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDE0MCkNCiAgICAgICAgJGN1c3RvbVBhdGguU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMzApDQogICAgICAgICRjdXN0b21QYXRoLlRleHQgPSAiQ3VzdG9tIFBhdGgiDQogICAgICAgICRjdXN0b21QYXRoLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRjdXN0b21QYXRoLkFkZF9DbGljayh7DQogICAgICAgICAgICAkY2hvaWNlID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSB1c2UgdGhlIHByZS1zZWxlY3RlZCBmb2xkZXIgc28gdGhhdCB0aGUgT2N1bHVzIGFwcCBsYXVuY2hlcyB0aGUgY29ycmVjdCB2ZXJzaW9uIG9mIHRoZSBnYW1lLmBuYG5gV2hpbGUgeW91IGNhbiB1c2UgYSBjdXN0b20gcGF0aCBpdCBpcyBub3QgcmVjb21tZW5kZWQuIFdvdWxkIHlvdSBzdGlsbCBsaWtlIHRvIHVzZSBhIGN1c3RvbSBwYXRoPyIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICBpZiAoJGNob2ljZSAtZXEgIk5vIikgew0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGdsb2JhbDpnYW1lUGF0aCA9IFJlYWQtRm9sZGVyQnJvd3NlckRpYWxvZyAtTWVzc2FnZSAiU2VsZWN0IHRoZSBmb2xkZXIgRWNobyBWUiBpcyBpbnN0YWxsZWQgaW4iDQogICAgICAgICAgICBpZiAoISh0ZXN0LXBhdGggIiRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXGVjaG92ci5leGUiKSkgew0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6c2hvdygiUGxlYXNlIHNlbGVjdCBhIHZhbGlkIGdhbWUgZm9sZGVyIiwgIkVjaG8gTmF2aWdhdG9yIERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRwaWNrTWVudS5DbG9zZSgpDQogICAgICAgIH0pDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJGN1c3RvbVBhdGgpDQoNCiAgICAgICAgJHBpY2tCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICAgICAkcGlja0J1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxODApDQogICAgICAgICRwaWNrQnV0dG9uLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDMwKQ0KICAgICAgICAkcGlja0J1dHRvbi5UZXh0ID0gIlNlbGVjdCINCiAgICAgICAgJHBpY2tCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tCdXR0b24uQWRkX0NsaWNrKHsNCiAgICAgICAgICAgIGlmICghKHRlc3QtcGF0aCAiJCgkbG9jYXRpb25zWyRwaWNrbGlzdC5TZWxlY3RlZEluZGV4XSlcU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkZ2xvYmFsOmdhbWVQYXRoID0gIiQoJHBpY2tMaXN0LlNlbGVjdGVkSXRlbSlcU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hIg0KICAgICAgICAgICAgJHBpY2tNZW51LkNsb3NlKCkNCiAgICAgICAgfSkNCiAgICAgICAgJHBpY2tNZW51LkNvbnRyb2xzLkFkZCgkcGlja0J1dHRvbikNCg0KICAgICAgICAkcGlja01lbnUuU2hvd0RpYWxvZygpDQogICAgfSkNCiAgICAkbWVudS5Db250cm9scy5BZGQoJHNlbGVjdEdhbWVGb2xkZXIpDQp9IGVsc2Ugew0KICAgICRnbG9iYWw6Z2FtZVBhdGggPSAiQzpcUHJvZ3JhbSBGaWxlc1xPY3VsdXNcU29mdHdhcmVcU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hIg0KICAgICRzZWxlY3RHYW1lRm9sZGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAkc2VsZWN0R2FtZUZvbGRlci5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwyMjApDQogICAgJHNlbGVjdEdhbWVGb2xkZXIuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMzApDQogICAgJHNlbGVjdEdhbWVGb2xkZXIuVGV4dCA9ICJTZWxlY3QgR2FtZSBGb2xkZXIiDQogICAgJHNlbGVjdEdhbWVGb2xkZXIuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkc2VsZWN0R2FtZUZvbGRlci5BZGRfQ2xpY2soew0KICAgICAgICAkbG9jYXRpb25zID0gR2V0LUNoaWxkSXRlbSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wqIg0KICAgICAgICAkbG9jYXRpb25MaXN0ID0gW1N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdQCgpDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25zKSB7DQogICAgICAgICAgICAkbG9jYXRpb25MaXN0LkFkZCgkKEdldC1JdGVtUHJvcGVydHkgIkhLQ1U6XFNPRlRXQVJFXE9jdWx1cyBWUiwgTExDXE9jdWx1c1xMaWJyYXJpZXNcJCgkbG9jYXRpb24uUFNDaGlsZE5hbWUpIiAtTmFtZSBPcmlnaW5hbFBhdGggfCBzZWxlY3QgLUV4cGFuZFByb3BlcnR5IE9yaWdpbmFsUGF0aCkpDQogICAgICAgIH0NCiAgICAgICAgJGxvY2F0aW9ucyA9IFtzeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0XUAoKQ0KICAgICAgICBmb3JlYWNoICgkbG9jYXRpb24gaW4gJGxvY2F0aW9uTGlzdCkgew0KICAgICAgICAgICAgaWYgKHRlc3QtcGF0aCAiJGxvY2F0aW9uXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYVxiaW5cd2luMTBcZWNob3ZyLmV4ZSIpIHsNCiAgICAgICAgICAgICAgICAkbG9jYXRpb25zLkFkZCgkbG9jYXRpb24pDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJHBpY2tNZW51ID0gbmV3LW9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtDQogICAgICAgICRwaWNrTWVudS50ZXh0ID0gIkVjaG8gTmF2aWdhdG9yIEluc3RhbGxlciINCiAgICAgICAgJHBpY2tNZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiAgICAgICAgJHBpY2tNZW51LlNpemUgPSBOZXctT2JqZWN0IERyYXdpbmcuU2l6ZSBAKDMyMCwgMjcwKQ0KICAgICAgICAkcGlja01lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQogICAgICAgICRwaWNrTWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQogICAgICAgICRwaWNrTWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KICAgICAgICAkcGlja01lbnUuU2hvd0luVGFza2JhciA9ICRmYWxzZQ0KDQogICAgICAgICRwaWNrTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgICAgICRwaWNrTGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTApDQogICAgICAgICRwaWNrTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMjApDQogICAgICAgICRwaWNrTGFiZWwuVGV4dCA9ICJTZWxlY3QgZm9sZGVyIEVjaG8gVlIgaXMgbG9jYXRlZCBpbiINCiAgICAgICAgJHBpY2tMYWJlbC5UZXh0QWxpZ24gPSAiTWlkZGxlQ2VudGVyIg0KICAgICAgICAkcGlja0xhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tMYWJlbCkNCg0KICAgICAgICAkcGlja0xpc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxpc3RCb3gNCiAgICAgICAgJHBpY2tMaXN0LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDMwKQ0KICAgICAgICAkcGlja0xpc3QuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMTAwKQ0KICAgICAgICAkcGlja0xpc3QuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tMaXN0LkRhdGFTb3VyY2UgPSAkbG9jYXRpb25MaXN0DQogICAgICAgICRwaWNrTGlzdC5TZWxlY3RlZEluZGV4ID0gJGkNCiAgICAgICAgJHBpY2tNZW51LkNvbnRyb2xzLkFkZCgkcGlja0xpc3QpDQoNCiAgICAgICAgJGN1c3RvbVBhdGggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICAgICAkY3VzdG9tUGF0aC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxNDApDQogICAgICAgICRjdXN0b21QYXRoLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDMwKQ0KICAgICAgICAkY3VzdG9tUGF0aC5UZXh0ID0gIkN1c3RvbSBQYXRoIg0KICAgICAgICAkY3VzdG9tUGF0aC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkY3VzdG9tUGF0aC5BZGRfQ2xpY2soew0KICAgICAgICAgICAgJGNob2ljZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlIHRoZSBwcmUtc2VsZWN0ZWQgZm9sZGVyIHNvIHRoYXQgdGhlIE9jdWx1cyBhcHAgbGF1bmNoZXMgdGhlIGNvcnJlY3QgdmVyc2lvbiBvZiB0aGUgZ2FtZS5gbmBuYFdoaWxlIHlvdSBjYW4gdXNlIGEgY3VzdG9tIHBhdGggaXQgaXMgbm90IHJlY29tbWVuZGVkLiBXb3VsZCB5b3Ugc3RpbGwgbGlrZSB0byB1c2UgYSBjdXN0b20gcGF0aD8iLCAiRWNobyBOYXZpZ2F0b3IgRG93bmdyYWRlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Olllc05vLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJObyIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSBSZWFkLUZvbGRlckJyb3dzZXJEaWFsb2cgLU1lc3NhZ2UgIlNlbGVjdCB0aGUgZm9sZGVyIEVjaG8gVlIgaXMgaW5zdGFsbGVkIGluIg0KICAgICAgICAgICAgaWYgKCEodGVzdC1wYXRoICIkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIE5hdmlnYXRvciBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRjdXN0b21QYXRoKQ0KDQogICAgICAgICRwaWNrQnV0dG9uID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAgICAgJHBpY2tCdXR0b24uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTgwKQ0KICAgICAgICAkcGlja0J1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwzMCkNCiAgICAgICAgJHBpY2tCdXR0b24uVGV4dCA9ICJTZWxlY3QiDQogICAgICAgICRwaWNrQnV0dG9uLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICAgICBpZiAoISh0ZXN0LXBhdGggIiQoJGxvY2F0aW9uc1skcGlja2xpc3QuU2VsZWN0ZWRJbmRleF0pXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYVxiaW5cd2luMTBcZWNob3ZyLmV4ZSIpKSB7DQogICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgZ2FtZSBmb2xkZXIiLCAiRWNobyBOYXZpZ2F0b3IgRG93bmdyYWRlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Ok9LLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGdsb2JhbDpnYW1lUGF0aCA9ICIkKCRwaWNrTGlzdC5TZWxlY3RlZEl0ZW0pXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYSINCiAgICAgICAgICAgICRwaWNrTWVudS5DbG9zZSgpDQogICAgICAgIH0pDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tCdXR0b24pDQoNCiAgICAgICAgJHBpY2tNZW51LlNob3dEaWFsb2coKQ0KICAgIH0pDQogICAgJGN1cnJlbnRQYXRoLlRleHQgPSAiQ3VycmVudCBHYW1lIEZvbGRlcjpgbiRnbG9iYWw6Z2FtZVBhdGgiDQogICAgJG1lbnUuQ29udHJvbHMuQWRkKCRzZWxlY3RHYW1lRm9sZGVyKQ0KfQ0KJGN1cnJlbnRQYXRoLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDI1MCkNCiRjdXJyZW50UGF0aC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMDAsMjAwKQ0KJGN1cnJlbnRQYXRoLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJGN1cnJlbnRQYXRoKQ0KDQokbWVudS5TaG93RGlhbG9nKCkNCg0K"
}
