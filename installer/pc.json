{
  "Script": "JFByb2dyZXNzUHJlZmVyZW5jZSA9ICdTaWxlbnRseUNvbnRpbnVlJw0KJGZpbGUgPSBJbnZva2UtV2ViUmVxdWVzdCBodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvLVJlbGF5LUluc3RhbGxlci9ob3N0Lmpzb24gLVVzZUJhc2ljUGFyc2luZw0KJGdsb2JhbDpkYXRhYmFzZSA9ICRmaWxlLkNvbnRlbnQgfCBDb252ZXJ0RnJvbS1Kc29uDQpmdW5jdGlvbiBSZWFkLUZvbGRlckJyb3dzZXJEaWFsb2coW3N0cmluZ10kTWVzc2FnZSwgW3N0cmluZ10kSW5pdGlhbERpcmVjdG9yeSkgew0KICAgICRhcHAgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgU2hlbGwuQXBwbGljYXRpb24NCiAgICAkZm9sZGVyID0gJGFwcC5Ccm93c2VGb3JGb2xkZXIoMCwgJE1lc3NhZ2UsIDAsICRJbml0aWFsRGlyZWN0b3J5KQ0KICAgIGlmICgkZm9sZGVyKSB7IHJldHVybiAkZm9sZGVyLlNlbGYuUGF0aCB9IGVsc2UgeyByZXR1cm4gJ0M6XFByb2dyYW0gRmlsZXNcT2N1bHVzXFNvZnR3YXJlXFNvZnR3YXJlJyB9DQp9DQpmdW5jdGlvbiBkb3duZ3JhZGVJbnN0cnVjdGlvbnNQYWdlMyB7DQogICAgJG5leHQudGV4dCA9ICJGaW5pc2ghIg0KICAgICR0cm91Ymxlc2hvb3RpbmdCdXR0b24uVmlzaWJsZSA9ICRmYWxzZQ0KICAgICRzdGFydFVwUGFnZS5UZXh0ID0gIkFmdGVyIHRoZSBnYW1lIGhhcyBmaW5pc2hlZCBkb3dubG9hZGluZyBwcmVzcyBZIGFuZCBoaXQgZW50ZXIgZm9yIHRoZSBmaXJzdGBucHJvbXB0IHRvIGJhY2t1cCB0aGUgZ2FtZSBmaWxlcyBhbmQgbGF1bmNoLmBuU2ltcGx5IHByZXNzIGVudGVyIGFnYWluIHRvIHNlbGVjdCB0aGUgYmFja3VwIGxvY2F0aW9uLmBuUHJlc3MgWSBhbmQgdGhlbiBlbnRlciB0byBsYXVuY2ggdGhlIGdhbWUgdG8gbWFrZSBzdXJlIGl0IHdvcmtzYG5PbmNlIHlvdSBhcmUgZG9uZSBwcmVzcyB0aGUgZmluaXNoIGtleSBvbmNlIHlvdSBhcmUgZG9uZSB0byBhdHRlbXB0YG5pbnN0YWxsYXRpb24gZm9yIEVjaG8gUmVsYXkuIg0KfQ0KDQpmdW5jdGlvbiB0cm91Ymxlc2hvb3Rpbmcgew0KICAgICRuZXh0LnZpc2libGUgPSAkZmFsc2UNCiAgICAkdHJvdWJsZXNob290aW5nQnV0dG9uLlZpc2libGUgPSAkZmFsc2UNCiAgICAkcHJldmlvdXMudmlzaWJsZSA9ICRmYWxzZQ0KICAgICRiYWNrQnV0dG9uLlZpc2libGUgPSAkdHJ1ZQ0KICAgICRzdGFydFVwUGFnZS50ZXh0ID0gIk9uZSBvciBtb3JlIG9mIHRoZSBmaWxlcyBmYWlsZWQgdG8gdmFsaWRhdGU6YG5PbiB0aGUgbWFpbiBtZW51IHByZXNzIDcgdGhlbiBlbnRlciwgdHlwZSBgIkRgIiBhbmQgaGl0IGVudGVyYG5UeXBlIGVjaG8gdnIgYW5kIGhpdCBlbnRlcixgblR5cGUgMzQuNC42MzE1NDcuMSBhbmQgaGl0IGVudGVyLCBwcmVzcyBZIGFuZCBoaXQgZW50ZXJgbldhaXQgZm9yIHRoZSBkb3dubG9hZCB0byBmaW5pc2guYG5QcmVzcyB0aGUgMyBrZXkgdG8gb3BlbiB0aGUgbGF1bmNoIG1lbnUgYW5kIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgc3RlcC4iDQp9DQoNCmZ1bmN0aW9uIGRvd25ncmFkZUluc3RydWN0aW9uc1BhZ2UyIHsNCiAgICAkbmV4dC50ZXh0ID0gIk5leHQiIA0KICAgICR0cm91Ymxlc2hvb3RpbmdCdXR0b24uVmlzaWJsZSA9ICR0cnVlDQogICAgJHN0YXJ0VXBQYWdlLlRleHQgPSAiVGhlbiBwcmVzcyB0aGUgMiBrZXkgYW5kIGhpdCBlbnRlci5gblNlYXJjaCBmb3IgYCJlY2hvIHZyYCIuYG5UaGVuIHBhc3RlIGAiMzQuNC42MzE1NDcuMWAiIGludG8gdGhlIGZpZWxkIHVzaW5nIGNydGwrdiAoY29waWVkIHRvIGNsaXBib2FyZCkgYW5kYG5oaXQgZW50ZXIuYG5UaGVuIHByZXNzIFkgYW5kIGhpdCBlbnRlciBhbmQgd2FpdCBmb3IgdGhlIGRvd25sb2FkIHRvIGZpbmlzaGBuSWYgdGhlIGRvd25sb2FkIGdpdmVzIGVycm9ycyBjbGljayB0aGUgdHJvdWJsZXNob290aW5nIGJ1dHRvbi4iDQogICAgU2V0LUNsaXBib2FyZCAiMzQuNC42MzE1NDcuMSINCn0NCg0KZnVuY3Rpb24gZG93bmdyYWRlSW5zdHJ1Y3Rpb25zUGFnZTEgew0KICAgICR0cm91Ymxlc2hvb3RpbmdCdXR0b24uVmlzaWJsZSA9ICRmYWxzZQ0KICAgICRwcmV2aW91cy52aXNpYmxlID0gJHRydWUNCiAgICAkc3RhcnRVcFBhZ2UuVGV4dCA9ICJBZnRlciB0aGUgT2N1bHVzIERvd25ncmFkZXIgaGFzIGxhdW5jaGVkIHByZXNzIFkgYW5kIGhpdCBlbnRlcmBuVGhlbiBwcmVzcyBhbnkga2V5IGFuZCBsb2cgaW50byB5b3VyIE1ldGEgYWNjb3VudC5gblRoZW4gZW50ZXIgYSBwYXNzd29yZCB0byBzZWN1cmUgeW91ciBNZXRhIGFjY291bnQgdG9rZW4iDQp9DQoNCmZ1bmN0aW9uIGRvd25ncmFkZUluc3RydWN0aW9uc1BhZ2UwIHsNCiAgICAkc3RhcnRVcFBhZ2UuVGV4dCA9ICJUaGVzZSBhcmUgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBkb3duZ3JhZGUgeW91ciBFY2hvVlIgY2xpZW50IHRvIHRoZSBjb3JyZWN0YG52ZXJzaW9uIGZvciBFY2hvIFJlbGF5LmBuU2ltcGx5IG1vdmUgdGhpcyB3aW5kb3cgb3BlbiBuZXh0IHRvIHRoZSBkb3duZ3JhZGVyLmBuUHJlc3MgbmV4dCB0byBnbyB0byB0aGUgbmV4dCBzdGVwLiINCn0NCg0KZnVuY3Rpb24gZG93bmdyYWRlSW5zdHJ1Y3Rpb25zIHsNCiAgICAkbWVudS5IaWRlKCkNCiAgICAkZG93bmdyYWRlTWVudS5IaWRlKCkNCg0KICAgICRkb3duZ3JhZGVJbnN0cnVjdGlvbnMgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zLnRleHQgPSAiRWNobyBSZWxheSBEb3duZ3JhZGVyIg0KICAgICRkb3duZ3JhZGVJbnN0cnVjdGlvbnMuSWNvbiA9IFtTeXN0ZW0uRHJhd2luZy5JY29uXTo6RXh0cmFjdEFzc29jaWF0ZWRJY29uKCRmaWxlTG9jYXRpb24xKQ0KICAgICRkb3duZ3JhZGVJbnN0cnVjdGlvbnMuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoNTAwLCAzMDApDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMjAwLCA0MDApDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5TdGFydFBvc2l0aW9uID0gIk1hbnVhbCINCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zLkZvcm1Cb3JkZXJTdHlsZSA9ICJGaXhlZERpYWxvZyINCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zLk1heGltaXplQm94ID0gJGZhbHNlDQoNCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9uc0xhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDEwKQ0KICAgICRkb3duZ3JhZGVJbnN0cnVjdGlvbnNMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMDAsMjApDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9uc0xhYmVsLlRleHQgPSAiRWNob1ZSIERvd25ncmFkZSBJbnN0cnVjdGlvbnMiDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9uc0xhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5Db250cm9scy5BZGQoJGRvd25ncmFkZUluc3RydWN0aW9uc0xhYmVsKQ0KDQogICAgJG5leHQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRuZXh0LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDQwMCwyMjUpDQogICAgJG5leHQuVGV4dCA9ICJOZXh0Ig0KICAgICRuZXh0LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5Db250cm9scy5BZGQoJG5leHQpDQoNCiAgICAkcHJldmlvdXMgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRwcmV2aW91cy5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgzMjAsMjI1KQ0KICAgICRwcmV2aW91cy5UZXh0ID0gIlByZXZpb3VzIg0KICAgICRwcmV2aW91cy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRwcmV2aW91cy5WaXNpYmxlID0gJGZhbHNlDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5Db250cm9scy5BZGQoJHByZXZpb3VzKQ0KDQogICAgJHRyb3VibGVzaG9vdGluZ0J1dHRvbiA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgJHRyb3VibGVzaG9vdGluZ0J1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwyMjUpDQogICAgJHRyb3VibGVzaG9vdGluZ0J1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkdHJvdWJsZXNob290aW5nQnV0dG9uLlRleHQgPSAiVHJvdWJsZXNob290aW5nIg0KICAgICR0cm91Ymxlc2hvb3RpbmdCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkdHJvdWJsZXNob290aW5nQnV0dG9uLlZpc2libGUgPSAkZmFsc2UNCiAgICAkdHJvdWJsZXNob290aW5nQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICR0cm91Ymxlc2hvb3RpbmdCdXR0b24uVmlzaWJsZSA9ICRmYWxzZQ0KICAgICAgICB0cm91Ymxlc2hvb3RpbmcNCiAgICB9KQ0KICAgICRkb3duZ3JhZGVJbnN0cnVjdGlvbnMuQ29udHJvbHMuQWRkKCR0cm91Ymxlc2hvb3RpbmdCdXR0b24pDQoNCiAgICAkYmFja0J1dHRvbiA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgJGJhY2tCdXR0b24uTG9jYXRpb24gPSAgTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDQwMCwyMjUpDQogICAgJGJhY2tCdXR0b24uVGV4dCA9ICJCYWNrIg0KICAgICRiYWNrQnV0dG9uLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGJhY2tCdXR0b24uVmlzaWJsZSA9ICRmYWxzZQ0KICAgICRiYWNrQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICRiYWNrQnV0dG9uLlZpc2libGUgPSAkZmFsc2UNCiAgICAgICAgJG5leHQuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRwcmV2aW91cy5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgJHRyb3VibGVzaG9vdGluZ0J1dHRvbi5WaXNpYmxlID0gJHRydWUNCiAgICAgICAgJHN0YXJ0VXBQYWdlLlRleHQgPSAiVGhlbiBwcmVzcyB0aGUgMiBrZXkgYW5kIGhpdCBlbnRlci5gblNlYXJjaCBmb3IgYCJlY2hvIHZyYCIuYG5UaGVuIHBhc3RlIGAiMzQuNC42MzE1NDcuMWAiIGludG8gdGhlIGZpZWxkIHVzaW5nIGNydGwrdiAoY29waWVkIHRvIGNsaXBib2FyZCkgYW5kYG5oaXQgZW50ZXIuYG5UaGVuIHByZXNzIFkgYW5kIGhpdCBlbnRlciBhbmQgd2FpdCBmb3IgdGhlIGRvd25sb2FkIHRvIGZpbmlzaGBuSWYgdGhlIGRvd25sb2FkIGdpdmVzIGVycm9ycyBjbGljayB0aGUgdHJvdWJsZXNob290aW5nIGJ1dHRvbi4iDQogICAgfSkNCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zLkNvbnRyb2xzLkFkZCgkYmFja0J1dHRvbikNCg0KICAgICRzdGFydFVwUGFnZSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAkc3RhcnRVcFBhZ2UuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNDApDQogICAgJHN0YXJ0VXBQYWdlLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwxNTApDQogICAgJHN0YXJ0VXBQYWdlLlRleHQgPSAiVGhlc2UgYXJlIGluc3RydWN0aW9ucyBvbiBob3cgdG8gZG93bmdyYWRlIHlvdXIgRWNob1ZSIGNsaWVudCB0byB0aGUgY29ycmVjdGBudmVyc2lvbiBmb3IgRWNobyBSZWxheS5gblNpbXBseSBtb3ZlIHRoaXMgd2luZG93IG9wZW4gbmV4dCB0byB0aGUgZG93bmdyYWRlci5gblByZXNzIG5leHQgdG8gZ28gdG8gdGhlIG5leHQgc3RlcC4iDQogICAgJHN0YXJ0VXBQYWdlLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZUluc3RydWN0aW9ucy5Db250cm9scy5BZGQoJHN0YXJ0VXBQYWdlKQ0KDQogICAgJGdsb2JhbDpjdXJyZW50UGFnZSA9IDANCg0KICAgICRuZXh0LkFkZF9DbGljayh7DQogICAgICAgIHN3aXRjaCAoJGdsb2JhbDpjdXJyZW50UGFnZSkgew0KICAgICAgICAgICAgMCB7IGRvd25ncmFkZUluc3RydWN0aW9uc1BhZ2UxOyAkZ2xvYmFsOmN1cnJlbnRQYWdlID0gMSB9DQogICAgICAgICAgICAxIHsgZG93bmdyYWRlSW5zdHJ1Y3Rpb25zUGFnZTI7ICRnbG9iYWw6Y3VycmVudFBhZ2UgPSAyIH0NCiAgICAgICAgICAgIDIgeyBkb3duZ3JhZGVJbnN0cnVjdGlvbnNQYWdlMzsgJGdsb2JhbDpjdXJyZW50UGFnZSA9IDMgfQ0KICAgICAgICAgICAgMyB7ICRkb3duZ3JhZGVJbnN0cnVjdGlvbnMuQ2xvc2UoKTsgJGdsb2JhbDpjdXJyZW50UGFnZSA9IDQgfQ0KICAgICAgICB9DQogICAgfSkNCg0KICAgICRwcmV2aW91cy5BZGRfQ2xpY2soew0KICAgICAgICBzd2l0Y2ggKCRnbG9iYWw6Y3VycmVudFBhZ2UpIHsNCiAgICAgICAgICAgIDEgeyBkb3duZ3JhZGVJbnN0cnVjdGlvbnNQYWdlMDsgJGdsb2JhbDpjdXJyZW50UGFnZSA9IDA7ICRwcmV2aW91cy52aXNpYmxlID0gJGZhbHNlIH0NCiAgICAgICAgICAgIDIgeyBkb3duZ3JhZGVJbnN0cnVjdGlvbnNQYWdlMTsgJGdsb2JhbDpjdXJyZW50UGFnZSA9IDEgfQ0KICAgICAgICAgICAgMyB7IGRvd25ncmFkZUluc3RydWN0aW9uc1BhZ2UyOyAkZ2xvYmFsOmN1cnJlbnRQYWdlID0gMiB9DQogICAgICAgICAgICA0IHsgZG93bmdyYWRlSW5zdHJ1Y3Rpb25zUGFnZTM7ICRnbG9iYWw6Y3VycmVudFBhZ2UgPSAzIH0NCiAgICAgICAgfQ0KICAgIH0pDQoNCiAgICAkZG93bmdyYWRlSW5zdHJ1Y3Rpb25zLlNob3dEaWFsb2coKQ0KICAgICRtZW51LlNob3coKQ0KfQ0KDQpmdW5jdGlvbiBkb3duZ3JhZGUgew0KICAgICRkb3duZ3JhZGVPcHRpb25zLkhpZGUoKQ0KICAgICRtZW51LkhpZGUoKQ0KDQogICAgJGRvd25ncmFkZU1lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAkZG93bmdyYWRlTWVudS50ZXh0ID0gIkVjaG8gUmVsYXkgRG93bmdyYWRlciINCiAgICAkZG93bmdyYWRlTWVudS5JY29uID0gW1N5c3RlbS5EcmF3aW5nLkljb25dOjpFeHRyYWN0QXNzb2NpYXRlZEljb24oJGZpbGVMb2NhdGlvbjEpDQogICAgJGRvd25ncmFkZU1lbnUuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoMzAwLCAyMDApDQogICAgJGRvd25ncmFkZU1lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQogICAgJGRvd25ncmFkZU1lbnUuRm9ybUJvcmRlclN0eWxlID0gIkZpeGVkRGlhbG9nIg0KICAgICRkb3duZ3JhZGVNZW51Lk1heGltaXplQm94ID0gJGZhbHNlDQoNCiAgICAkZG93bmdyYWRlTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJGRvd25ncmFkZUxhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDEwKQ0KICAgICRkb3duZ3JhZGVMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyMCkNCiAgICAkZG93bmdyYWRlTGFiZWwuVGV4dCA9ICJFY2hvIFJlbGF5IERvd25ncmFkZXIiDQogICAgJGRvd25ncmFkZUxhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRkb3duZ3JhZGVMYWJlbCkNCg0KICAgICRkb3duZ3JhZGVCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRkb3duZ3JhZGVCdXR0b24uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMzApDQogICAgJGRvd25ncmFkZUJ1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkZG93bmdyYWRlQnV0dG9uLlRleHQgPSAiRG93bmdyYWRlIg0KICAgICRkb3duZ3JhZGVCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkZG93bmdyYWRlQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJEb3dubG9hZGluZy4uLiINCiAgICAgICAgJGRvd25ncmFkZUluc3RhbGxlciA9ICJodHRwczovL2dpdGh1Yi5jb20vQ29tcHV0ZXJFbGl0ZS9PY3VsdXMtZG93bmdyYWRlci9yZWxlYXNlcy9kb3dubG9hZC8xLjExLjM2L25ldDYuMC4xLnppcCINCiAgICAgICAgJGRvd25ncmFkZVBhdGggPSAiJGVudjp0ZW1wXGRvd25ncmFkZXIuemlwIg0KICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRkb3duZ3JhZGVJbnN0YWxsZXIgLU91dEZpbGUgJGRvd25ncmFkZVBhdGgNCiAgICAgICAgRXhwYW5kLUFyY2hpdmUgLVBhdGggJGRvd25ncmFkZVBhdGggLURlc3RpbmF0aW9uUGF0aCAkZW52OlVTRVJQUk9GSUxFXGRvd25ncmFkZXIgLWZvcmNlDQogICAgICAgIEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgImh0dHBzOi8vbXNlZGdlZHJpdmVyLmF6dXJlZWRnZS5uZXQvMTE4LjAuMjA4OC43Ni9lZGdlZHJpdmVyX3dpbjY0LnppcCIgLU91dEZpbGUgIiRlbnY6dGVtcFxlZGdlZHJpdmVyLnppcCINCiAgICAgICAgRXhwYW5kLUFyY2hpdmUgLVBhdGggIiRlbnY6dGVtcFxlZGdlZHJpdmVyLnppcCIgLURlc3RpbmF0aW9uUGF0aCAiJGVudjpVU0VSUFJPRklMRVxkb3duZ3JhZGVyIiAtZm9yY2UNCiAgICAgICAgU3RhcnQtUHJvY2VzcyAiJGVudjpVU0VSUFJPRklMRVxkb3duZ3JhZGVyXE9jdWx1cyBEb3duZ3JhZGVyIg0KICAgICAgICBzdGFydC1zbGVlcCAtcyAxDQogICAgICAgIGlmICgoZ2V0LXByb2Nlc3MgIk9jdWx1cyBEb3duZ3JhZGVyIikgLWVxICRudWxsKSB7DQogICAgICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiRG93bmdyYWRlIg0KICAgICAgICAgICAgJG5vRG90TkVULlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZG93bmdyYWRlSW5zdHJ1Y3Rpb25zDQogICAgICAgICAgICB3aGlsZSAoKGdldC1wcm9jZXNzICJPY3VsdXMgRG93bmdyYWRlciIpIC1uZSAkbnVsbCkgew0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6c2hvdygiT2N1bHVzIERvd25ncmFkZXIgaXMgc3RpbGwgcnVubmluZywgcGxlYXNlIGNsb3NlIGl0IGJlZm9yZSBjb250aW51aW5nIiwgIkVjaG8gUmVsYXkgSW5zdGFsbGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZGVsICRlbnY6VVNFUlBST0ZJTEVcZG93bmdyYWRlciAtcmVjdXJzZSAtZm9yY2UNCiAgICB9KQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkZG93bmdyYWRlQnV0dG9uKQ0KDQogICAgJGluc3RhbGxkb3RORVQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRpbnN0YWxsZG90TkVULkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDcwKQ0KICAgICRpbnN0YWxsZG90TkVULlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDMwKQ0KICAgICRpbnN0YWxsZG90TkVULlRleHQgPSAiSW5zdGFsbCAuTkVUIDYuMCINCiAgICAkaW5zdGFsbGRvdE5FVC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRpbnN0YWxsZG90TkVULkFkZF9DbGljayh7DQogICAgICAgICRkb3RORVRJbnN0YWxsZXIgPSAiaHR0cHM6Ly9kb3dubG9hZC52aXN1YWxzdHVkaW8ubWljcm9zb2Z0LmNvbS9kb3dubG9hZC9wci8xYWMwYjU3ZS1jZjY0LTQ4N2YtYWVjZi1kN2RmMDExMWZkNTYvMjQ4NGNiZTFmZmFjY2VhY2FhNDFlYWI5MmE2ZGU5OTgvZG90bmV0LXJ1bnRpbWUtNi4wLjMtd2luLXg2NC5leGUiDQogICAgICAgICRkb3RORVRJbnN0YWxsZXJQYXRoID0gIiRlbnY6dGVtcFxkb3RORVRJbnN0YWxsZXIuZXhlIg0KICAgICAgICAkaW5zdGFsbGRvdE5FVC50ZXh0ID0gIkRvd25sb2FkaW5nLi4uIg0KICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRkb3RORVRJbnN0YWxsZXIgLU91dEZpbGUgJGRvdE5FVEluc3RhbGxlclBhdGgNCiAgICAgICAgJGluc3RhbGxEb3RORVQudGV4dCA9ICJBY2NlcHQgUHJvbXB0Ig0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAkZG90TkVUSW5zdGFsbGVyUGF0aCAtdmVyYiBydW5BcyAtQXJndW1lbnRMaXN0ICIvaW5zdGFsbCAvcXVpZXQgL25vcmVzdGFydCINCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAkbm9Eb3RORVQuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICAgICAkaW5zdGFsbGRvdE5FVC50ZXh0ID0gIkluc3RhbGwgLk5FVCA2LjAiDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICAkaW5zdGFsbERvdE5FVC50ZXh0ID0gIkluc3RhbGxpbmcuLi4iDQogICAgICAgIHN0YXJ0LXNsZWVwIC1zIDMNCiAgICAgICAgJG5vRG90TkVULlZpc2libGUgPSAkZmFsc2UNCiAgICAgICAgJGluc3RhbGxkb3RORVQudGV4dCA9ICJJbnN0YWxsIC5ORVQgNi4wIg0KICAgIH0pDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRpbnN0YWxsZG90TkVUKQ0KDQogICAgJG5vRG90TkVUID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRub0RvdE5FVC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMDApDQogICAgJG5vRG90TkVULlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwMCwyMCkNCiAgICAkbm9Eb3RORVQuVGV4dCA9ICJZb3UgZGlkIG5vdCBpbnN0YWxsIC5ORVQgNi4wIg0KICAgICRub0RvdE5FVC5Gb3JlQ29sb3IgPSAiUmVkIg0KICAgICRub0RvdE5FVC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRub0RvdE5FVC5WaXNpYmxlID0gJGZhbHNlDQogICAgJGRvd25ncmFkZU1lbnUuQ29udHJvbHMuQWRkKCRub0RvdE5FVCkNCg0KICAgICRkb3duZ3JhZGVUb29sR2l0aHViID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MaW5rTGFiZWwNCiAgICAkZG93bmdyYWRlVG9vbEdpdGh1Yi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMjApDQogICAgJGRvd25ncmFkZVRvb2xHaXRodWIuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsNDApDQogICAgJGRvd25ncmFkZVRvb2xHaXRodWIuVGV4dCA9ICJPY3VsdXMgRG93bmdyYWRlcmBuTWFkZSBCeTogQ29tcHV0ZXJFbGl0ZSINCiAgICAkZG93bmdyYWRlVG9vbEdpdGh1Yi5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRkb3duZ3JhZGVUb29sR2l0aHViLkFkZF9DbGljayh7ZXhwbG9yZXIgaHR0cHM6Ly9naXRodWIuY29tL0NvbXB1dGVyRWxpdGUvT2N1bHVzLWRvd25ncmFkZXJ9KQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkZG93bmdyYWRlVG9vbEdpdGh1YikNCg0KICAgICRkb3duZ3JhZGVNZW51LlNob3dEaWFsb2coKQ0KICAgICRtZW51LlNob3coKQ0KfQ0KDQpmdW5jdGlvbiBlbnRpdGxlbWVudCB7DQogICAgJGRvd25ncmFkZU9wdGlvbnMuSGlkZSgpDQogICAgJG1lbnUuSGlkZSgpDQoNCiAgICAkZG93bmdyYWRlTWVudSA9IG5ldy1vYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICRkb3duZ3JhZGVNZW51LnRleHQgPSAiRWNobyBSZWxheSBEb3duZ3JhZGVyIg0KICAgICRkb3duZ3JhZGVNZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiAgICAkZG93bmdyYWRlTWVudS5TaXplID0gTmV3LU9iamVjdCBEcmF3aW5nLlNpemUgQCgzMDAsIDIwMCkNCiAgICAkZG93bmdyYWRlTWVudS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCiAgICAkZG93bmdyYWRlTWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQogICAgJGRvd25ncmFkZU1lbnUuTWF4aW1pemVCb3ggPSAkZmFsc2UNCg0KICAgICRkb3duZ3JhZGVMYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAkZG93bmdyYWRlTGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTApDQogICAgJGRvd25ncmFkZUxhYmVsLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDIwKQ0KICAgICRkb3duZ3JhZGVMYWJlbC5UZXh0ID0gIkVjaG8gUmVsYXkgRG93bmdyYWRlciINCiAgICAkZG93bmdyYWRlTGFiZWwuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkZG93bmdyYWRlTWVudS5Db250cm9scy5BZGQoJGRvd25ncmFkZUxhYmVsKQ0KDQoNCiAgICAkaW5zdGFsbFByb2dyZXNzID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0Jhcg0KICAgICRpbnN0YWxsUHJvZ3Jlc3MuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTAwKQ0KICAgICRpbnN0YWxsUHJvZ3Jlc3MuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMTApDQogICAgJGluc3RhbGxQcm9ncmVzcy5TdHlsZSA9ICJDb250aW51b3VzIg0KICAgICRpbnN0YWxsUHJvZ3Jlc3MuTWF4aW11bSA9IDEwMA0KICAgICRpbnN0YWxsUHJvZ3Jlc3MubWluaW11bSA9IDANCiAgICAkaW5zdGFsbFByb2dyZXNzLlZhbHVlID0gMA0KICAgICRpbnN0YWxsUHJvZ3Jlc3MuVmlzaWJsZSA9ICRmYWxzZQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkaW5zdGFsbFByb2dyZXNzKQ0KDQogICAgJGZvbGRlclBpY2tlciA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgJGZvbGRlclBpY2tlci5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwzMCkNCiAgICAkZm9sZGVyUGlja2VyLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDMwKQ0KICAgICRmb2xkZXJQaWNrZXIuVGV4dCA9ICJUYXJnZXQgZm9sZGVyIg0KICAgICRmb2xkZXJQaWNrZXIuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkZm9sZGVyUGlja2VyLkFkZF9DbGljayh7DQogICAgICAgICRsb2NhdGlvbnMgPSBHZXQtQ2hpbGRJdGVtICJIS0NVOlxTT0ZUV0FSRVxPY3VsdXMgVlIsIExMQ1xPY3VsdXNcTGlicmFyaWVzXCoiDQogICAgICAgICRsb2NhdGlvbkxpc3QgPSBbU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdF1AKCkNCiAgICAgICAgZm9yZWFjaCAoJGxvY2F0aW9uIGluICRsb2NhdGlvbnMpIHsNCiAgICAgICAgICAgICRsb2NhdGlvbkxpc3QuQWRkKCQoR2V0LUl0ZW1Qcm9wZXJ0eSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wkKCRsb2NhdGlvbi5QU0NoaWxkTmFtZSkiIC1OYW1lIE9yaWdpbmFsUGF0aCB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgT3JpZ2luYWxQYXRoKSkNCiAgICAgICAgfQ0KICAgICAgICAkaT0wDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25MaXN0KSB7DQogICAgICAgICAgICBpZiAodGVzdC1wYXRoICIkbG9jYXRpb25cU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikgew0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkaSsrDQogICAgICAgIH0NCiAgICAgICAgJHBpY2tNZW51ID0gbmV3LW9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtDQogICAgICAgICRwaWNrTWVudS50ZXh0ID0gIkVjaG8gUmVsYXkgRG93bmdyYWRlciINCiAgICAgICAgJHBpY2tNZW51Lkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiAgICAgICAgJHBpY2tNZW51LlNpemUgPSBOZXctT2JqZWN0IERyYXdpbmcuU2l6ZSBAKDMyMCwgMjcwKQ0KICAgICAgICAkcGlja01lbnUuU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQogICAgICAgICRwaWNrTWVudS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQogICAgICAgICRwaWNrTWVudS5NYXhpbWl6ZUJveCA9ICRmYWxzZQ0KICAgICAgICAkcGlja01lbnUuU2hvd0luVGFza2JhciA9ICRmYWxzZQ0KDQogICAgICAgICRwaWNrTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgICAgICRwaWNrTGFiZWwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTApDQogICAgICAgICRwaWNrTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMjApDQogICAgICAgICRwaWNrTGFiZWwuVGV4dCA9ICJTZWxlY3QgZm9sZGVyIHRvIGRvd25sb2FkIEVjaG8gVlIgaW50byINCiAgICAgICAgJHBpY2tMYWJlbC5UZXh0QWxpZ24gPSAiTWlkZGxlQ2VudGVyIg0KICAgICAgICAkcGlja0xhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tMYWJlbCkNCg0KICAgICAgICAkcGlja0xpc3QgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxpc3RCb3gNCiAgICAgICAgJHBpY2tMaXN0LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDMwKQ0KICAgICAgICAkcGlja0xpc3QuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyODAsMTAwKQ0KICAgICAgICAkcGlja0xpc3QuRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tMaXN0LkRhdGFTb3VyY2UgPSAkbG9jYXRpb25MaXN0DQogICAgICAgICRwaWNrTGlzdC5TZWxlY3RlZEluZGV4ID0gJGkNCiAgICAgICAgJHBpY2tNZW51LkNvbnRyb2xzLkFkZCgkcGlja0xpc3QpDQoNCiAgICAgICAgJGN1c3RvbVBhdGggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICAgICAkY3VzdG9tUGF0aC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxNDApDQogICAgICAgICRjdXN0b21QYXRoLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDMwKQ0KICAgICAgICAkY3VzdG9tUGF0aC5UZXh0ID0gIkN1c3RvbSBQYXRoIg0KICAgICAgICAkY3VzdG9tUGF0aC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkY3VzdG9tUGF0aC5BZGRfQ2xpY2soew0KICAgICAgICAgICAgJGNob2ljZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlIHRoZSBwcmUtc2VsZWN0ZWQgZm9sZGVyIHNvIHRoYXQgdGhlIE9jdWx1cyBhcHAgbGF1bmNoZXMgdGhlIGRvd25ncmFkZWQgdmVyc2lvbiBvZiB0aGUgZ2FtZS5gbmBuYFdoaWxlIHlvdSBjYW4gdXNlIGEgY3VzdG9tIHBhdGggaXQgaXMgbm90IHJlY29tbWVuZGVkLiBXb3VsZCB5b3Ugc3RpbGwgbGlrZSB0byB1c2UgYSBjdXN0b20gcGF0aD8iLCAiRWNobyBSZWxheSBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICBpZiAoJGNob2ljZSAtZXEgIk5vIikgew0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJGdsb2JhbDpnYW1lUGF0aCA9IFJlYWQtRm9sZGVyQnJvd3NlckRpYWxvZyAtTWVzc2FnZSAiU2VsZWN0IHRoZSBmb2xkZXIgeW91IHdhbnQgdG8gaW5zdGFsbCBFY2hvIFZSIGludG8iDQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRjdXN0b21QYXRoKQ0KDQogICAgICAgICRwaWNrQnV0dG9uID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAgICAgJHBpY2tCdXR0b24uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTgwKQ0KICAgICAgICAkcGlja0J1dHRvbi5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwzMCkNCiAgICAgICAgJHBpY2tCdXR0b24uVGV4dCA9ICJTZWxlY3QiDQogICAgICAgICRwaWNrQnV0dG9uLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrQnV0dG9uLkFkZF9DbGljayh7DQogICAgICAgICAgICBpZiAoJHBpY2tsaXN0LlNlbGVjdGVkSW5kZXggLW5lICRpKSB7DQogICAgICAgICAgICAgICAgJGNob2ljZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6c2hvdygiSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlIHRoZSBwcmUtc2VsZWN0ZWQgZm9sZGVyIHNvIHRoYXQgdGhlIE9jdWx1cyBhcHAgbGF1bmNoZXMgdGhlIGRvd25ncmFkZWQgdmVyc2lvbiBvZiB0aGUgZ2FtZS5gbmBuYFdoaWxlIHlvdSBjYW4gc3RpbGwgcGljayB0aGlzIGZvbGRlciBpdCBpcyBub3QgcmVjb21tZW5kZWQuIFdvdWxkIHlvdSBzdGlsbCBsaWtlIHRvIHVzZSB0aGUgc2VsZWN0ZWQgZm9sZGVyPyIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpZZXNObywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICBpZiAoJGNob2ljZSAtZXEgIk5vIikgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkZ2xvYmFsOmdhbWVQYXRoID0gIiQoJHBpY2tMaXN0LlNlbGVjdGVkSXRlbSlcU29mdHdhcmUiDQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrQnV0dG9uKQ0KDQogICAgICAgICRwaWNrTWVudS5TaG93RGlhbG9nKCkNCiAgICB9KQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkZm9sZGVyUGlja2VyKQ0KDQogICAgJGRvd25ncmFkZUJ1dHRvbiA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQogICAgJGRvd25ncmFkZUJ1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCw3MCkNCiAgICAkZG93bmdyYWRlQnV0dG9uLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjAwLDMwKQ0KICAgICRkb3duZ3JhZGVCdXR0b24uVGV4dCA9ICJJbnN0YWxsIg0KICAgICRkb3duZ3JhZGVCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAkZG93bmdyYWRlQnV0dG9uLkFkZF9DbGljayh7DQoNCiAgICAgICAgaWYgKCRnbG9iYWw6Z2FtZVBhdGggLWVxICRudWxsKSB7DQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKChHZXQtUFNEcml2ZSAtbmFtZSAiQyIpLmZyZWUvMUdCIC1sdCAxNSkgew0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpzaG93KCJZb3UgZG8gbm90IGhhdmUgZW5vdWdoIHNwYWNlIG9uIHlvdXIgQyBkcml2ZSB0byBpbnN0YWxsIHRoZSBnYW1lLCB5b3UgbmVlZCAxNSBnaWdzIG9mIHRvdGFsIGZyZWUgc3BhY2UgKGFsdGhvdWdoIG9ubHkgNSBnaWdzIGFyZSB1c2VkIGFmdGVyIGluc3RhbGxhdGlvbiBmaW5pc2hlcykuYG5gblRoZSBPY3VsdXMgRG93bmdyYWRlciByZXF1aXJlcyBsZXNzIHRvdGFsIHN0b3JhZ2Ugc3BhY2UgYWx0aG91Z2ggaXQgaXMgaGFyZGVyIHRvIGRvLiBJZiB5b3UgY2FuIG5vdCBmcmVlIHVwIDE1IGdpZ3Mgb2Ygc3BhY2UgdXNlIHRoYXQgaW5zdGVhZC4iLCAiRWNobyBSZWxheSBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06OkVycm9yKQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCg0KICAgICAgICAkZG9Ob3RFeGl0TGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgICAgICRkb05vdEV4aXRMYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMTUpDQogICAgICAgICRkb05vdEV4aXRMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMDAsMjAwKQ0KICAgICAgICAkZG9Ob3RFeGl0TGFiZWwuVGV4dCA9ICJEbyBub3QgZXhpdCB0aGUgaW5zdGFsbGVyIHVudGlsIGl0IGlzIGZpbmlzaGVkYG5ldmVuIGlmIGl0IGlzIGAibm90IHJlc3BvbmRpbmdgIiINCiAgICAgICAgJGRvTm90RXhpdExhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkZG9Ob3RFeGl0TGFiZWwpDQoNCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi5lbmFibGVkID0gJGZhbHNlDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJEb3dubG9hZGluZy4uLiINCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi5SZWZyZXNoKCkNCiAgICAgICAgJGluc3RhbGxQcm9ncmVzcy5WaXNpYmxlID0gJHRydWUNCg0KICAgICAgICBpZiAodGVzdC1wYXRoICIkZ2xvYmFsOmdhbWVQYXRoXGJpbiIpIHsNCiAgICAgICAgICAgIGNkICRnbG9iYWw6Z2FtZVBhdGgNCiAgICAgICAgICAgIGNkLi4NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSAoZ2V0LWxvY2F0aW9uKS5QYXRoDQogICAgICAgICAgICBjZCAkc2NyaXB0OnBzc2NyaXB0cm9vdA0KICAgICAgICB9DQoNCiAgICAgICAgJGpvYiA9IFN0YXJ0LUpvYiAtU2NyaXB0QmxvY2sgew0KICAgICAgICAgICAgJHVyaSA9IE5ldy1PYmplY3QgIlN5c3RlbS5VcmkiICdodHRwczovL2FwaS5vbmVkcml2ZS5jb20vdjEuMC9zaGFyZXMvcyFBb3lFcGdBVWZIODFnWXNoS3Z0aDVBQzVXY0swMncvcm9vdC9jb250ZW50Jw0KICAgICAgICAgICAgJHJlcXVlc3QgPSBbU3lzdGVtLk5ldC5IdHRwV2ViUmVxdWVzdF06OkNyZWF0ZSgkdXJpKQ0KICAgICAgICAgICAgJHJlcXVlc3Quc2V0X1RpbWVvdXQoMTUwMDApDQogICAgICAgICAgICAkcmVzcG9uc2UgPSAkcmVxdWVzdC5HZXRSZXNwb25zZSgpDQogICAgICAgICAgICAkdG90YWxMZW5ndGggPSBbU3lzdGVtLk1hdGhdOjpGbG9vcigkcmVzcG9uc2UuZ2V0X0NvbnRlbnRMZW5ndGgoKS8xMDI0KQ0KICAgICAgICAgICAgJHJlc3BvbnNlU3RyZWFtID0gJHJlc3BvbnNlLkdldFJlc3BvbnNlU3RyZWFtKCkNCiAgICAgICAgICAgICR0YXJnZXRTdHJlYW0gPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uSU8uRmlsZVN0cmVhbSAtQXJndW1lbnRMaXN0ICRlbnY6dGVtcFxldnIua2V5LCBDcmVhdGUNCiAgICAgICAgICAgICRidWZmZXIgPSBuZXctb2JqZWN0IGJ5dGVbXSAxMEtCDQogICAgICAgICAgICAkY291bnQgPSAkcmVzcG9uc2VTdHJlYW0uUmVhZCgkYnVmZmVyLDAsJGJ1ZmZlci5sZW5ndGgpDQogICAgICAgICAgICB3aGlsZSAoJGNvdW50IC1ndCAwKSB7DQogICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5Xcml0ZSgkYnVmZmVyLCAwLCAkY291bnQpDQogICAgICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAgICAgJGNvdW50ID0gJHJlc3BvbnNlU3RyZWFtLlJlYWQoJGJ1ZmZlciwwLCRidWZmZXIubGVuZ3RoKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHRhcmdldFN0cmVhbS5GbHVzaCgpDQogICAgICAgICAgICAkdGFyZ2V0U3RyZWFtLkNsb3NlKCkNCiAgICAgICAgICAgICR0YXJnZXRTdHJlYW0uRGlzcG9zZSgpDQogICAgICAgICAgICAkcmVzcG9uc2VTdHJlYW0uRGlzcG9zZSgpDQogICAgICAgIH0NCg0KICAgICAgICB3aGlsZSAoJGpvYi5TdGF0ZSAtZXEgJ1J1bm5pbmcnKSB7DQogICAgICAgICAgICAkaW5zdGFsbFByb2dyZXNzLlZhbHVlID0gKCgoR2V0LUl0ZW0gIiRlbnY6dGVtcFxldnIua2V5IikubGVuZ3RoIC8gNTAyNjkwMzQyMykgKiAxMDApDQogICAgICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KICAgICAgICB9DQoNCiAgICAgICAgUmVtb3ZlLUpvYiAtSm9iICRqb2INCg0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAzDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJEZWNyeXB0aW5nLi4uIg0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KDQogICAgICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLlNlY3VyaXR5DQogICAgICAgICRqb2IgPSBzdGFydC1qb2Igew0KICAgICAgICAgICAgJGlucHV0RmlsZVBhdGggPSAiJGVudjp0ZW1wXGV2ci5rZXkiDQogICAgICAgICAgICAkb3V0cHV0RmlsZVBhdGggPSAiJGVudjp0ZW1wXGV2ci56aXAiDQogICAgICAgICAgICAka2V5ID0gW1RleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJlY2hvcmVwbGF5Z2FtZWZpIikNCiAgICAgICAgICAgICRpdiA9IFtUZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiZWNob3JlcGxheWdhbWVmaSIpDQogICAgICAgICAgICAkcmlqQWxnID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlJpam5kYWVsTWFuYWdlZA0KICAgICAgICAgICAgJHJpakFsZy5LZXkgPSAka2V5DQogICAgICAgICAgICAkcmlqQWxnLklWID0gJGl2DQogICAgICAgICAgICAkZGVjcnlwdG9yID0gJHJpakFsZy5DcmVhdGVEZWNyeXB0b3IoJHJpakFsZy5LZXksICRyaWpBbGcuSVYpDQogICAgICAgICAgICAkaW5GaWxlU3RyZWFtID0gTmV3LU9iamVjdCBTeXN0ZW0uSU8uRmlsZVN0cmVhbSgkaW5wdXRGaWxlUGF0aCwgW0lPLkZpbGVNb2RlXTo6T3BlbiwgW0lPLkZpbGVBY2Nlc3NdOjpSZWFkKQ0KICAgICAgICAgICAgJG91dEZpbGVTdHJlYW0gPSBOZXctT2JqZWN0IFN5c3RlbS5JTy5GaWxlU3RyZWFtKCRvdXRwdXRGaWxlUGF0aCwgW0lPLkZpbGVNb2RlXTo6Q3JlYXRlLCBbSU8uRmlsZUFjY2Vzc106OldyaXRlKQ0KICAgICAgICAgICAgJGNyeXB0b1N0cmVhbSA9IE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5DcnlwdG9TdHJlYW0oJGluRmlsZVN0cmVhbSwgJGRlY3J5cHRvciwgW1NlY3VyaXR5LkNyeXB0b2dyYXBoeS5DcnlwdG9TdHJlYW1Nb2RlXTo6UmVhZCkNCiAgICAgICAgICAgICRidWZmZXIgPSBOZXctT2JqZWN0IGJ5dGVbXSg0MDk2KQ0KICAgICAgICAgICAgd2hpbGUgKCgkcmVhZCA9ICRjcnlwdG9TdHJlYW0uUmVhZCgkYnVmZmVyLCAwLCAkYnVmZmVyLkxlbmd0aCkpIC1ndCAwKSB7DQogICAgICAgICAgICAgICAgJG91dEZpbGVTdHJlYW0uV3JpdGUoJGJ1ZmZlciwgMCwgJHJlYWQpDQogICAgICAgICAgICB9DQogICAgICAgICAgICAkY3J5cHRvU3RyZWFtLkNsb3NlKCkNCiAgICAgICAgICAgICRvdXRGaWxlU3RyZWFtLkNsb3NlKCkNCiAgICAgICAgICAgICRpbkZpbGVTdHJlYW0uQ2xvc2UoKQ0KICAgICAgICAgICAgJGluRmlsZVN0cmVhbS5EaXNwb3NlKCkNCiAgICAgICAgICAgICRvdXRGaWxlU3RyZWFtLkRpc3Bvc2UoKQ0KICAgICAgICAgICAgJGNyeXB0b1N0cmVhbS5EaXNwb3NlKCkNCiAgICAgICAgfQ0KDQogICAgICAgIHdoaWxlICgkam9iLlN0YXRlIC1lcSAiUnVubmluZyIpIHsNCiAgICAgICAgICAgICRpbnN0YWxsUHJvZ3Jlc3MuVmFsdWUgPSAoKChHZXQtSXRlbSAiJGVudjp0ZW1wXGV2ci56aXAiKS5sZW5ndGggLyA1MDI2OTAzNDIzKSAqIDEwMCkNCiAgICAgICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTAwDQogICAgICAgIH0NCg0KICAgICAgICByZW1vdmUtam9iIC1qb2IgJGpvYg0KDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJWZXJpZnlpbmcuLi4iDQogICAgICAgICRkb3duZ3JhZGVCdXR0b24uUmVmcmVzaCgpDQogICAgICAgIHN0YXJ0LXNsZWVwIC1zIDMNCiAgICAgICAgaWYgKChHZXQtRmlsZUhhc2ggJGVudjp0ZW1wXGV2ci56aXAgLWFsZ29yaXRobSBtZDUpLkhhc2ggLW5lICJBRTQ1RkNFNEM0NUQzOEIwQjAzRUZFNDZCNUU3RUM4NCIpIHsNCiAgICAgICAgICAgICRkb3duZ3JhZGVCdXR0b24udGV4dCA9ICJUcnkgYWdhaW4iDQogICAgICAgICAgICAkaW5zdGFsbFByb2dyZXNzLlZpc2libGUgPSAkZmFsc2UNCiAgICAgICAgICAgICRkb3duZ3JhZGVCdXR0b24uZW5hYmxlZCA9ICR0cnVlDQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlRoZSBkb3dubG9hZCBmYWlsZWQsIHBsZWFzZSB0cnkgYWdhaW4iLCAiRWNobyBSZWxheSBEb3duZ3JhZGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiRXh0cmFjdGluZy4uLiINCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi5SZWZyZXNoKCkNCiAgICAgICAgJGluc3RhbGxQcm9ncmVzcy52aXNpYmxlID0gJGZhbHNlDQogICAgICAgICRpbnN0YWxsUHJvZ3Jlc3MuUmVmcmVzaCgpDQogICAgICAgIHN0YXJ0LXNsZWVwIC1zIDMNCiAgICAgICAgJGpvYiA9IHN0YXJ0LWpvYiB7DQogICAgICAgICAgICBwYXJhbSgkZ2xvYmFsOmdhbWVQYXRoKQ0KICAgICAgICAgICAgRXhwYW5kLUFyY2hpdmUgLVBhdGggJGVudjp0ZW1wXGV2ci56aXAgLURlc3RpbmF0aW9uUGF0aCAkZ2xvYmFsOmdhbWVQYXRoIC1mb3JjZQ0KICAgICAgICB9IC1Bcmd1bWVudExpc3QgJGdsb2JhbDpnYW1lUGF0aA0KDQogICAgICAgIHdoaWxlICgkam9iLlN0YXRlIC1lcSAiUnVubmluZyIpIHsNCiAgICAgICAgICAgIHN0YXJ0LXNsZWVwIC1zZWNvbmRzIDENCiAgICAgICAgfQ0KDQogICAgICAgIHJlbW92ZS1qb2IgLWpvYiAkam9iDQoNCiAgICAgICAgJGRvd25ncmFkZUJ1dHRvbi50ZXh0ID0gIlBhdGNoaW5nLi4uIg0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCBodHRwczovL2VjaG8tZm91bmRhdGlvbi5wYWdlcy5kZXYvZmlsZXMvb2ZmbGluZV9lY2hvL3Buc292ci5kbGwgLW91dEZpbGUgJGdsb2JhbDpnYW1lUGF0aFxyZWFkeS1hdC1kYXduLWVjaG8tYXJlbmFcYmluXHdpbjEwXHBuc292ci5kbGwNCiAgICAgICAgZGVsICRlbnY6dGVtcFxldnIuemlwDQogICAgICAgIGRlbCAkZW52OnRlbXBcZXZyLmtleQ0KICAgICAgICAkZ2xvYmFsOmdhbWVQYXRoID0gIiRnbG9iYWw6Z2FtZVBhdGhccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hIg0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLnRleHQgPSAiRmluaXNoZWQhIg0KICAgICAgICAkZG93bmdyYWRlQnV0dG9uLlJlZnJlc2goKQ0KICAgICAgICBzdGFydC1zbGVlcCAtcyAzDQogICAgICAgICRkb3duZ3JhZGVNZW51LkNsb3NlKCkNCiAgICB9KQ0KICAgICRkb3duZ3JhZGVNZW51LkNvbnRyb2xzLkFkZCgkZG93bmdyYWRlQnV0dG9uKQ0KDQogICAgJGRvd25ncmFkZU1lbnUuU2hvd0RpYWxvZygpDQogICAgJG1lbnUuU2hvdygpDQogICAgcmV0dXJuDQp9DQpmdW5jdGlvbiBkb3duZ3JhZGVPcHRpb25zIHsNCiAgICAkZG93bmdyYWRlT3B0aW9ucyA9IG5ldy1vYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICRkb3duZ3JhZGVPcHRpb25zLnRleHQgPSAiRWNobyBSZWxheSBEb3duZ3JhZGVyIg0KICAgICRkb3duZ3JhZGVPcHRpb25zLkljb24gPSBbU3lzdGVtLkRyYXdpbmcuSWNvbl06OkV4dHJhY3RBc3NvY2lhdGVkSWNvbigkZmlsZUxvY2F0aW9uMSkNCiAgICAkZG93bmdyYWRlT3B0aW9ucy5TaXplID0gTmV3LU9iamVjdCBEcmF3aW5nLlNpemUgQCg0NjAsIDEyMCkNCiAgICAkZG93bmdyYWRlT3B0aW9ucy5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCiAgICAkZG93bmdyYWRlT3B0aW9ucy5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWREaWFsb2ciDQogICAgJGRvd25ncmFkZU9wdGlvbnMuTWF4aW1pemVCb3ggPSAkZmFsc2UNCiAgICAkZG93bmdyYWRlT3B0aW9ucy5TaG93SW5UYXNrYmFyID0gJGZhbHNlDQoNCiAgICAkZG93bmdyYWRlTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJGRvd25ncmFkZUxhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDgwLDEwKQ0KICAgICRkb3duZ3JhZGVMYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMDAsMjApDQogICAgJGRvd25ncmFkZUxhYmVsLlRleHQgPSAiV2hhdCBkb3duZ3JhZGUgbWV0aG9kIHdvdWxkIHlvdSBsaWtlIHRvIHVzZT8iDQogICAgJGRvd25ncmFkZUxhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZU9wdGlvbnMuQ29udHJvbHMuQWRkKCRkb3duZ3JhZGVMYWJlbCkNCg0KICAgICRPY3VsdXMgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRPY3VsdXMuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMzApDQogICAgJE9jdWx1cy5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkT2N1bHVzLlRleHQgPSAiT2N1bHVzIERvd25ncmFkZXIiDQogICAgJE9jdWx1cy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRPY3VsdXMuQWRkX0NsaWNrKHtkb3duZ3JhZGV9KQ0KICAgICRkb3duZ3JhZGVPcHRpb25zLkNvbnRyb2xzLkFkZCgkT2N1bHVzKQ0KDQogICAgJGVudGl0bGVtZW50ID0gbmV3LW9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAkZW50aXRsZW1lbnQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjMwLDMwKQ0KICAgICRlbnRpdGxlbWVudC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkZW50aXRsZW1lbnQuVGV4dCA9ICJFbnRpdGxlbWVudCBCeXBhc3MiDQogICAgJGVudGl0bGVtZW50LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGVudGl0bGVtZW50LkFkZF9DbGljayh7ZW50aXRsZW1lbnR9KQ0KICAgICRkb3duZ3JhZGVPcHRpb25zLkNvbnRyb2xzLkFkZCgkZW50aXRsZW1lbnQpDQoNCiAgICAkcmVjb21tZW5kZWQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJHJlY29tbWVuZGVkLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4NSw2MCkNCiAgICAkcmVjb21tZW5kZWQuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwKQ0KICAgICRyZWNvbW1lbmRlZC5UZXh0ID0gIihyZWNvbW1lbmRlZCkiDQogICAgJHJlY29tbWVuZGVkLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgJGRvd25ncmFkZU9wdGlvbnMuQ29udHJvbHMuQWRkKCRyZWNvbW1lbmRlZCkNCg0KDQogICAgJGRvd25ncmFkZU9wdGlvbnMuU2hvd0RpYWxvZygpDQp9DQoNCmZ1bmN0aW9uIGluc3RhbGwgew0KICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5WaXNpYmxlID0gJGZhbHNlDQogICAgaWYgKCR1c2VybmFtZUJveC50ZXh0IC1lcSAiIiAtb3IgJHBhc3N3b3JkQm94LnRleHQgLWVxICIiKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlBsZWFzZSBlbnRlciBhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCINCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCRwYXNzd29yZEJveC5UZXh0Lkxlbmd0aCAtbHQgOCkgew0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVGV4dCA9ICJQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycyINCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCRwYXNzd29yZEJveC5UZXh0IC1ub3RtYXRjaCAiW2Etel0iKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlBhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCAxIGxldHRlciINCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCRwYXNzd29yZEJveC5UZXh0IC1ub3RtYXRjaCAiWzAtOV0iKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIlBhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCAxIG51bWJlciINCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCR1c2VybmFtZUJveC50ZXh0IC1tYXRjaCAiICIgLW9yICRwYXNzd29yZEJveC50ZXh0IC1tYXRjaCAiICIpIHsNCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlRleHQgPSAiVXNlcm5hbWUgYW5kIFBhc3N3b3JkIGNhbm5vdCBjb250YWluIHNwYWNlcyINCiAgICAgICAgJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkdHJ1ZQ0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCEodGVzdC1wYXRoICRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXGVjaG92ci5leGUpKSB7DQogICAgICAgICRjaG9pY2UgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciBvciBpbnN0YWxsIHRoZSBnYW1lLmBuYG5Eb24ndCBoYXZlIHRoZSBnYW1lIGluc3RhbGxlZD8gQ2xpY2sgWWVzIHRvIGluc3RhbGwgaXQuIiwgIkVjaG8gUmVsYXkgSW5zdGFsbGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6WWVzTm8sIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06Oldhcm5pbmcpDQogICAgICAgIGlmICgkY2hvaWNlIC1lcSAiWWVzIikgew0KICAgICAgICAgICAgZG93bmdyYWRlT3B0aW9ucw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgaWYgKCEodGVzdC1wYXRoICRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXGVjaG92ci5leGUpKSB7DQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIlRoZSBnYW1lIHdhcyBub3QgaW5zdGFsbGVkIiwgIkVjaG8gUmVsYXkgSW5zdGFsbGVyIiwgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hidXR0b25zXTo6T0ssIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94aWNvbl06OkVycm9yKQ0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgkaW5mb0NoZWNrQm94LkNoZWNrZWQgLWVxICRmYWxzZSkgew0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICBzdGFydC1zbGVlcCAtTWlsbGlzZWNvbmRzIDE1MA0KICAgICAgICAkaW5mb0xhYmVsLkZvcmVDb2xvciA9ICJSZWQiDQogICAgICAgIHN0YXJ0LXNsZWVwIC1NaWxsaXNlY29uZHMgMTUwDQogICAgICAgICRpbmZvTGFiZWwuRm9yZUNvbG9yID0gIkJsYWNrIg0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKCEoVGVzdC1QYXRoICRlbnY6bG9jYWxhcHBkYXRhXHJhZC1iYWNrdXApKSB7DQogICAgICAgIENvcHktSXRlbSAiJGVudjpsb2NhbGFwcGRhdGFccmFkIiAiJGVudjpsb2NhbGFwcGRhdGFccmFkLWJhY2t1cCIgLVJlY3Vyc2UNCiAgICB9DQogICAgaWYgKChHZXQtRmlsZUhhc2ggLVBhdGggJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcZWNob3ZyLmV4ZSkuaGFzaCAtbmUgIkI2RDA4Mjc3RTU4NDY5MDBDODEwMDRCNjRCMjk4REY2QUNCQTgzNEI2OTcwMEE2NDBCNzU4QkRBOTRBNTIwNDMiKSB7DQogICAgICAgICRub1VzZXJuYW1lT3JQYXNzd29yZC5UZXh0ID0gIllvdSBhcmUgb24gdGhlIHdyb25nIHZlcnNpb24gb2YgRWNob1ZSIg0KICAgICAgICAkbm9Vc2VybmFtZU9yUGFzc3dvcmQuVmlzaWJsZSA9ICR0cnVlDQogICAgICAgICRjaG9pY2UgPSBbU3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveF06OnNob3coIllvdSBhcmUgb24gdGhlIHdyb25nIHZlcnNpb24gb2YgRWNob1ZSLCB3b3VsZCB5b3UgbGlrZSB0byBkb3duZ3JhZGU/IiAsICJFY2hvIFJlbGF5IEluc3RhbGxlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Olllc05vLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICBpZiAoJGNob2ljZSAtZXEgIlllcyIpIHsNCiAgICAgICAgICAgIGRvd25ncmFkZU9wdGlvbnMNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgoR2V0LUZpbGVIYXNoIC1QYXRoICRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXGVjaG92ci5leGUpLmhhc2ggLW5lICJCNkQwODI3N0U1ODQ2OTAwQzgxMDA0QjY0QjI5OERGNkFDQkE4MzRCNjk3MDBBNjQwQjc1OEJEQTk0QTUyMDQzIikgew0KICAgICAgICBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveF06OlNob3coIlRoZSBnYW1lIHdhcyBub3QgZG93bmdyYWRlZCwgcGxlYXNlIHRyeSBhZ2Fpbi4iLCAiRWNobyBSZWxheSBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6SW5mb3JtYXRpb24pDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICBta2RpciAiJGVudjphcHBkYXRhXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXJcIg0KICAgICRjb25maWcgPSBAe30NCiAgICAkY29uZmlnIHwgQWRkLU1lbWJlciAtTmFtZSAndXNlcm5hbWUnIC1UeXBlIE5vdGVQcm9wZXJ0eSAtVmFsdWUgIiQoJHVzZXJuYW1lQm94LnRleHQpIg0KICAgICRjb25maWcgfCBBZGQtTWVtYmVyIC1OYW1lICdwYXNzd29yZCcgLVR5cGUgTm90ZVByb3BlcnR5IC1WYWx1ZSAiJCgkcGFzc3dvcmRCb3gudGV4dCkiDQogICAgJGNvbmZpZyB8IEFkZC1NZW1iZXIgLU5hbWUgJ2dhbWVQYXRoJyAtVHlwZSBOb3RlUHJvcGVydHkgLVZhbHVlICIkKCRnbG9iYWw6Z2FtZVBhdGgpIg0KICAgICRjb25maWcgfCBjb252ZXJ0dG8tanNvbiB8IHNldC1jb250ZW50ICIkZW52OmFwcGRhdGFcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlclxjb25maWcuanNvbiINCiAgICBJbnZva2UtV2ViUmVxdWVzdCAiaHR0cHM6Ly9hbGRpbjEwMS5naXRodWIuaW8vZWNoby1yZWxheS1zZXJ2ZXItYnJvd3Nlci9FY2hvJTIwUmVsYXklMjBTZXJ2ZXIlMjBCcm93c2VyLmV4ZSIgLU91dEZpbGUgIiRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXIuZXhlIg0KICAgICRXc2hTaGVsbCA9IE5ldy1PYmplY3QgLWNvbU9iamVjdCBXU2NyaXB0LlNoZWxsDQogICAgJFNob3J0Y3V0ID0gJFdzaFNoZWxsLkNyZWF0ZVNob3J0Y3V0KCIkZW52OlVTRVJQUk9GSUxFXERlc2t0b3BcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5sbmsiKQ0KICAgICRTaG9ydGN1dC5UYXJnZXRQYXRoID0gIiRnbG9iYWw6Z2FtZVBhdGhcYmluXHdpbjEwXEVjaG8gUmVsYXkgU2VydmVyIEJyb3dzZXIuZXhlIg0KICAgICRTaG9ydGN1dC5TYXZlKCkNCiAgICAkU2hvcnRjdXQgPSAkV3NoU2hlbGwuQ3JlYXRlU2hvcnRjdXQoIiRlbnY6VVNFUlBST0ZJTEVcRGVza3RvcFxFY2hvIFZSLmxuayIpDQogICAgJFNob3J0Y3V0LlRhcmdldFBhdGggPSAiJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcRWNob1ZSLmV4ZSINCiAgICAkU2hvcnRjdXQuU2F2ZSgpDQogICAgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hdOjpTaG93KCJFY2hvIFJlbGF5IFN1Y2Nlc3NmdWxseSBJbnN0YWxsZWQiLCAiRWNobyBSZWxheSBJbnN0YWxsZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6SW5mb3JtYXRpb24pDQogICAgc3RhcnQtcHJvY2VzcyAiJGdsb2JhbDpnYW1lUGF0aFxiaW5cd2luMTBcRWNobyBSZWxheSBTZXJ2ZXIgQnJvd3Nlci5leGUiDQogICAgJG1lbnUuQ2xvc2UoKQ0KfQ0KDQoNCg0KDQpbcmVmbGVjdGlvbi5hc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoICJTeXN0ZW0uV2luZG93cy5Gb3JtcyIpDQpbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpFbmFibGVWaXN1YWxTdHlsZXMoKQ0KJG1lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCg0KJG1lbnUudGV4dCA9ICJFY2hvIFJlbGF5IEluc3RhbGxlciINCiRmaWxlTG9jYXRpb24gPSBHZXQtQ2ltSW5zdGFuY2UgV2luMzJfUHJvY2VzcyAtRmlsdGVyICJuYW1lID0gJ0VjaG8gUmVsYXkgSW5zdGFsbGVyLmV4ZSciIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQokZmlsZUxvY2F0aW9uMSA9ICRmaWxlTG9jYXRpb24uQ29tbWFuZExpbmUgLXJlcGxhY2UgJyInLCAiIg0KJG1lbnUuSWNvbiA9IFtTeXN0ZW0uRHJhd2luZy5JY29uXTo6RXh0cmFjdEFzc29jaWF0ZWRJY29uKCRmaWxlTG9jYXRpb24xKQ0KJG1lbnUuU2l6ZSA9IE5ldy1PYmplY3QgRHJhd2luZy5TaXplIEAoNjAwLCA0MDApDQokbWVudS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCiRtZW51LkZvcm1Cb3JkZXJTdHlsZSA9ICJGaXhlZERpYWxvZyINCiRtZW51Lk1heGltaXplQm94ID0gJGZhbHNlDQoNCiRsYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiRsYWJlbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMCkNCiRsYWJlbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyMCkNCiRsYWJlbC5UZXh0ID0gIkVjaG8gUmVsYXkgSW5zdGFsbGVyIg0KJGxhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJGxhYmVsKQ0KDQokdXNlcm5hbWUgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokdXNlcm5hbWUuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNDApDQokdXNlcm5hbWUuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokdXNlcm5hbWUuVGV4dCA9ICJVc2VybmFtZSINCiR1c2VybmFtZS5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCR1c2VybmFtZSkNCg0KJHVzZXJuYW1lQm94ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5UZXh0Qm94DQokdXNlcm5hbWVCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsNjApDQokdXNlcm5hbWVCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokdXNlcm5hbWVCb3guRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRtZW51LkNvbnRyb2xzLkFkZCgkdXNlcm5hbWVCb3gpDQoNCiRwYXNzd29yZCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiRwYXNzd29yZC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCw5MCkNCiRwYXNzd29yZC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwyMCkNCiRwYXNzd29yZC5UZXh0ID0gIlBhc3N3b3JkIg0KJHBhc3N3b3JkLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJHBhc3N3b3JkKQ0KDQokcGFzc3dvcmRCb3ggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlRleHRCb3gNCiRwYXNzd29yZEJveC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxMTApDQokcGFzc3dvcmRCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAsMjApDQokcGFzc3dvcmRCb3guRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAiKiINCiRtZW51LkNvbnRyb2xzLkFkZCgkcGFzc3dvcmRCb3gpDQoNCiRzaG93UGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlBpY3R1cmVCb3gNCiRzaG93UGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTg4LCAxMTEpDQokc2hvd1Bhc3N3b3JkLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjEsIDIxKQ0KJHNob3dQYXNzd29yZC5TaXplTW9kZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5QaWN0dXJlQm94U2l6ZU1vZGVdOjpTdHJldGNoSW1hZ2UNCiRzaG93UGFzc3dvcmQuSW1hZ2VMb2NhdGlvbiA9ICJodHRwczovL2FsZGluMTAxLmdpdGh1Yi5pby9FY2hvLVJlbGF5LUluc3RhbGxlci9leWUucG5nIg0KJHNob3dQYXNzd29yZC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpXaGl0ZQ0KJHNob3dQYXNzd29yZC5BZGRfQ2xpY2soew0KICAgIGlmICgkcGFzc3dvcmRCb3guUGFzc3dvcmRDaGFyIC1lcSAiKiIpIHsNCiAgICAgICAgJHBhc3N3b3JkQm94LlBhc3N3b3JkQ2hhciA9ICRudWxsDQogICAgICAgICRzaG93UGFzc3dvcmQuQmFja0NvbG9yID0gW1N5c3RlbS5EcmF3aW5nLkNvbG9yXTo6TGlnaHRCbHVlDQogICAgICAgICR0b29sVGlwLlNldFRvb2xUaXAoJHNob3dQYXNzd29yZCwgIkhpZGUgUGFzc3dvcmQiKQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRwYXNzd29yZEJveC5QYXNzd29yZENoYXIgPSAiKiINCiAgICAgICAgJHNob3dQYXNzd29yZC5CYWNrQ29sb3IgPSBbU3lzdGVtLkRyYXdpbmcuQ29sb3JdOjpXaGl0ZQ0KICAgICAgICAkdG9vbFRpcC5TZXRUb29sVGlwKCRzaG93UGFzc3dvcmQsICJTaG93IFBhc3N3b3JkIikNCiAgICB9DQp9KQ0KJHNob3dQYXNzd29yZC5BZGRfTW91c2VFbnRlcih7DQogICAgJHNob3dQYXNzd29yZC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06OkZpeGVkU2luZ2xlDQp9KQ0KJHNob3dQYXNzd29yZC5BZGRfTW91c2VMZWF2ZSh7DQogICAgJHNob3dQYXNzd29yZC5Cb3JkZXJTdHlsZSA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Cb3JkZXJTdHlsZV06Ok5vbmUNCn0pDQokbWVudS5Db250cm9scy5BZGQoJHNob3dQYXNzd29yZCkNCg0KJHNob3dQYXNzd29yZC5CcmluZ1RvRnJvbnQoKQ0KDQokdG9vbFRpcCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVG9vbFRpcA0KJHRvb2xUaXAuQXV0b21hdGljRGVsYXkgPSA1MDANCiR0b29sVGlwLlNldFRvb2xUaXAoJHNob3dQYXNzd29yZCwgIlNob3cgUGFzc3dvcmQiKQ0KDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokbm9Vc2VybmFtZU9yUGFzc3dvcmQuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTcwKQ0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjEwLDIwKQ0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsOCINCiRub1VzZXJuYW1lT3JQYXNzd29yZC5Gb3JlQ29sb3IgPSAiUmVkIg0KJG5vVXNlcm5hbWVPclBhc3N3b3JkLlZpc2libGUgPSAkZmFsc2UNCiRtZW51LkNvbnRyb2xzLkFkZCgkbm9Vc2VybmFtZU9yUGFzc3dvcmQpDQoNCiRpbmZvTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQokaW5mb0xhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIyMCwxMCkNCiRpbmZvTGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIzMCkNCiRpbmZvTGFiZWwuVGV4dCA9ICJUaGlzIGluZm9ybWF0aW9uIGlzIG5vdCB5b3VyIE1ldGEgbG9nIGluLCBpdCBpcyB5b3VyIGFjY291bnRgbm9uIEVjaG8gUmVsYXkgc2VydmVycy4gQnV0IHlvdXIgYWNjb3VudCBpbmZvIGlzIHN0aWxsIHRpZWQgdG9gbnlvdXIgTWV0YSBhY2NvdW50IGFuZCBjYW5ub3QgYmUgY2hhbmdlZCBsYXRlci5gbklmIHlvdSBmb3JnZXQgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uIGZvciBhIHNlcnZlciBwbGVhc2VgbmNvbnRhY3QgdGhlIHNlcnZlciBob3N0LmBuYG5UaGVyZSBpcyBubyBjaGVjayBmb3IgaWYgeW91ciB1c2VybmFtZSBoYXMgYWxyZWFkeSBiZWVuYG5jbGFpbWVkIGF0IHRoaXMgdGltZS4gSWYgeW91IHJlY2VpdmUgbG9naW4gZXJyb3JzIHBsZWFzZWBudHJ5IGEgZGlmZmVyZW50IHVzZXJuYW1lLmBuYG5ETyBOT1QgdXNlIHRoZSBzYW1lIHBhc3N3b3JkIGZvciB5b3UgTWV0YSBhY2NvdW50IG9yYG5hbnkgb3RoZXIgb25saW5lIHNlcnZpY2UuIFdoaWxlIHVzaW5nIHVuaXF1ZSBwYXNzd29yZHMgZm9yYG5hbGwgb25saW5lIHNlcnZpY2VzIGlzIGFsd2F5cyByZWNvbW1lbmRlZCwgaXQgaXMgZXNwZWNpYWxseWBuaW1wb3J0YW50IGZvciBFY2hvIFJlbGF5IGJlY2F1c2UgeW91ciBhY2NvdW50IGluZm9ybWF0aW9uYG5pcyBub3Qgc2VjdXJlZC4iDQokaW5mb0xhYmVsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokbWVudS5Db250cm9scy5BZGQoJGluZm9MYWJlbCkNCg0KJGluZm9DaGVja0JveCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ2hlY2tCb3gNCiRpbmZvQ2hlY2tCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjIwLDI0MCkNCiRpbmZvQ2hlY2tCb3guU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwKQ0KJGluZm9DaGVja0JveC5UZXh0ID0gIkkgaGF2ZSByZWFkIGFuZCB1bmRlcnN0YW5kIHRoZSBhYm92ZSBub3RpY2UiDQokaW5mb0NoZWNrQm94LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQoNCiRpbmZvQ2hlY2tCb3guQWRkX0tleURvd24oew0KICAgIGlmICgkXy5LZXlDb2RlIC1lcSAiRW50ZXIiKSB7DQogICAgICAgICRpbmZvQ2hlY2tCb3guQ2hlY2tlZCA9ICEkaW5mb0NoZWNrQm94LkNoZWNrZWQNCiAgICB9DQp9KQ0KDQokbWVudS5Db250cm9scy5hZGQoJGluZm9DaGVja0JveCkNCg0KDQokaW5zdGFsbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uDQokaW5zdGFsbC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxNDApDQokaW5zdGFsbC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiRpbnN0YWxsLlRleHQgPSAiSW5zdGFsbCINCiRpbnN0YWxsLkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQokaW5zdGFsbC5BZGRfQ2xpY2soe2luc3RhbGx9KQ0KJG1lbnUuQ29udHJvbHMuQWRkKCRpbnN0YWxsKQ0KDQokY3JlZGl0cyA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiRjcmVkaXRzLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDUsMzI1KQ0KJGNyZWRpdHMuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwMCkNCiRjcmVkaXRzLlRleHQgPSAiRWNobyBSZWxheSBDcmVhdGVkIGJ5OiBYZW5vbWVnYWBuSW5zdGFsbGVyIENyZWF0ZWQgYnk6QWxkaW4xMDEiDQokY3JlZGl0cy5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRjcmVkaXRzKQ0KDQokY3VycmVudFBhdGggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQppZiAoISh0ZXN0LXBhdGggIkM6XFByb2dyYW0gRmlsZXNcT2N1bHVzXFNvZnR3YXJlXFNvZnR3YXJlXHJlYWR5LWF0LWRhd24tZWNoby1hcmVuYVxiaW5cd2luMTBcZWNob3ZyLmV4ZSIpKSB7DQogICAgJGN1cnJlbnRQYXRoLlRleHQgPSAiQ3VycmVudCBHYW1lIEZvbGRlcjpgblBsZWFzZSBTZWxlY3QgR2FtZSBGb2xkZXIiDQogICAgJHNlbGVjdEdhbWVGb2xkZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDIyMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5UZXh0ID0gIlNlbGVjdCBHYW1lIEZvbGRlciINCiAgICAkc2VsZWN0R2FtZUZvbGRlci5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkFkZF9DbGljayh7DQogICAgICAgICRsb2NhdGlvbnMgPSBHZXQtQ2hpbGRJdGVtICJIS0NVOlxTT0ZUV0FSRVxPY3VsdXMgVlIsIExMQ1xPY3VsdXNcTGlicmFyaWVzXCoiDQogICAgICAgICRsb2NhdGlvbkxpc3QgPSBbU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdF1AKCkNCiAgICAgICAgZm9yZWFjaCAoJGxvY2F0aW9uIGluICRsb2NhdGlvbnMpIHsNCiAgICAgICAgICAgICRsb2NhdGlvbkxpc3QuQWRkKCQoR2V0LUl0ZW1Qcm9wZXJ0eSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wkKCRsb2NhdGlvbi5QU0NoaWxkTmFtZSkiIC1OYW1lIE9yaWdpbmFsUGF0aCB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgT3JpZ2luYWxQYXRoKSkNCiAgICAgICAgfQ0KICAgICAgICAkbG9jYXRpb25zID0gW3N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdQCgpDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25MaXN0KSB7DQogICAgICAgICAgICBpZiAodGVzdC1wYXRoICIkbG9jYXRpb25cU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikgew0KICAgICAgICAgICAgICAgICRsb2NhdGlvbnMuQWRkKCRsb2NhdGlvbikNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkcGlja01lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAgICAgJHBpY2tNZW51LnRleHQgPSAiRWNobyBSZWxheSBJbnN0YWxsZXIiDQogICAgICAgICRwaWNrTWVudS5JY29uID0gW1N5c3RlbS5EcmF3aW5nLkljb25dOjpFeHRyYWN0QXNzb2NpYXRlZEljb24oJGZpbGVMb2NhdGlvbjEpDQogICAgICAgICRwaWNrTWVudS5TaXplID0gTmV3LU9iamVjdCBEcmF3aW5nLlNpemUgQCgzMjAsIDI3MCkNCiAgICAgICAgJHBpY2tNZW51LlN0YXJ0UG9zaXRpb24gPSAiQ2VudGVyU2NyZWVuIg0KICAgICAgICAkcGlja01lbnUuRm9ybUJvcmRlclN0eWxlID0gIkZpeGVkRGlhbG9nIg0KICAgICAgICAkcGlja01lbnUuTWF4aW1pemVCb3ggPSAkZmFsc2UNCiAgICAgICAgJHBpY2tNZW51LlNob3dJblRhc2tiYXIgPSAkZmFsc2UNCg0KICAgICAgICAkcGlja0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICAgICAkcGlja0xhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDEwKQ0KICAgICAgICAkcGlja0xhYmVsLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDIwKQ0KICAgICAgICAkcGlja0xhYmVsLlRleHQgPSAiU2VsZWN0IGZvbGRlciBFY2hvIFZSIGlzIGxvY2F0ZWQgaW4iDQogICAgICAgICRwaWNrTGFiZWwuVGV4dEFsaWduID0gIk1pZGRsZUNlbnRlciINCiAgICAgICAgJHBpY2tMYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrTGFiZWwpDQoNCiAgICAgICAgJHBpY2tMaXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MaXN0Qm94DQogICAgICAgICRwaWNrTGlzdC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwzMCkNCiAgICAgICAgJHBpY2tMaXN0LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDEwMCkNCiAgICAgICAgJHBpY2tMaXN0LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrTGlzdC5EYXRhU291cmNlID0gJGxvY2F0aW9uTGlzdA0KICAgICAgICAkcGlja0xpc3QuU2VsZWN0ZWRJbmRleCA9ICRpDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tMaXN0KQ0KDQogICAgICAgICRjdXN0b21QYXRoID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAgICAgJGN1c3RvbVBhdGguTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTQwKQ0KICAgICAgICAkY3VzdG9tUGF0aC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwzMCkNCiAgICAgICAgJGN1c3RvbVBhdGguVGV4dCA9ICJDdXN0b20gUGF0aCINCiAgICAgICAgJGN1c3RvbVBhdGguRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJGN1c3RvbVBhdGguQWRkX0NsaWNrKHsNCiAgICAgICAgICAgICRjaG9pY2UgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkl0IGlzIHJlY29tbWVuZGVkIHRoYXQgeW91IHVzZSB0aGUgcHJlLXNlbGVjdGVkIGZvbGRlciBzbyB0aGF0IHRoZSBPY3VsdXMgYXBwIGxhdW5jaGVzIHRoZSBjb3JyZWN0IHZlcnNpb24gb2YgdGhlIGdhbWUuYG5gbmBXaGlsZSB5b3UgY2FuIHVzZSBhIGN1c3RvbSBwYXRoIGl0IGlzIG5vdCByZWNvbW1lbmRlZC4gV291bGQgeW91IHN0aWxsIGxpa2UgdG8gdXNlIGEgY3VzdG9tIHBhdGg/IiwgIkVjaG8gUmVsYXkgRG93bmdyYWRlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Olllc05vLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJObyIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSBSZWFkLUZvbGRlckJyb3dzZXJEaWFsb2cgLU1lc3NhZ2UgIlNlbGVjdCB0aGUgZm9sZGVyIEVjaG8gVlIgaXMgaW5zdGFsbGVkIGluIg0KICAgICAgICAgICAgaWYgKCEodGVzdC1wYXRoICIkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRwaWNrTWVudS5DbG9zZSgpDQogICAgICAgIH0pDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJGN1c3RvbVBhdGgpDQoNCiAgICAgICAgJHBpY2tCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICAgICAkcGlja0J1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxODApDQogICAgICAgICRwaWNrQnV0dG9uLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDMwKQ0KICAgICAgICAkcGlja0J1dHRvbi5UZXh0ID0gIlNlbGVjdCINCiAgICAgICAgJHBpY2tCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tCdXR0b24uQWRkX0NsaWNrKHsNCiAgICAgICAgICAgIGlmICghKHRlc3QtcGF0aCAiJCgkbG9jYXRpb25zWyRwaWNrbGlzdC5TZWxlY3RlZEluZGV4XSlcU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSAiJCgkcGlja0xpc3QuU2VsZWN0ZWRJdGVtKVxTb2Z0d2FyZVxyZWFkeS1hdC1kYXduLWVjaG8tYXJlbmEiDQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrQnV0dG9uKQ0KDQogICAgICAgICRwaWNrTWVudS5TaG93RGlhbG9nKCkNCiAgICB9KQ0KICAgICRtZW51LkNvbnRyb2xzLkFkZCgkc2VsZWN0R2FtZUZvbGRlcikNCn0gZWxzZSB7DQogICAgJGdsb2JhbDpnYW1lUGF0aCA9ICJDOlxQcm9ncmFtIEZpbGVzXE9jdWx1c1xTb2Z0d2FyZVxTb2Z0d2FyZVxyZWFkeS1hdC1kYXduLWVjaG8tYXJlbmEiDQogICAgJHNlbGVjdEdhbWVGb2xkZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDIyMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDIwMCwzMCkNCiAgICAkc2VsZWN0R2FtZUZvbGRlci5UZXh0ID0gIlNlbGVjdCBHYW1lIEZvbGRlciINCiAgICAkc2VsZWN0R2FtZUZvbGRlci5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICRzZWxlY3RHYW1lRm9sZGVyLkFkZF9DbGljayh7DQogICAgICAgICRsb2NhdGlvbnMgPSBHZXQtQ2hpbGRJdGVtICJIS0NVOlxTT0ZUV0FSRVxPY3VsdXMgVlIsIExMQ1xPY3VsdXNcTGlicmFyaWVzXCoiDQogICAgICAgICRsb2NhdGlvbkxpc3QgPSBbU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdF1AKCkNCiAgICAgICAgZm9yZWFjaCAoJGxvY2F0aW9uIGluICRsb2NhdGlvbnMpIHsNCiAgICAgICAgICAgICRsb2NhdGlvbkxpc3QuQWRkKCQoR2V0LUl0ZW1Qcm9wZXJ0eSAiSEtDVTpcU09GVFdBUkVcT2N1bHVzIFZSLCBMTENcT2N1bHVzXExpYnJhcmllc1wkKCRsb2NhdGlvbi5QU0NoaWxkTmFtZSkiIC1OYW1lIE9yaWdpbmFsUGF0aCB8IHNlbGVjdCAtRXhwYW5kUHJvcGVydHkgT3JpZ2luYWxQYXRoKSkNCiAgICAgICAgfQ0KICAgICAgICAkbG9jYXRpb25zID0gW3N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3RdQCgpDQogICAgICAgIGZvcmVhY2ggKCRsb2NhdGlvbiBpbiAkbG9jYXRpb25MaXN0KSB7DQogICAgICAgICAgICBpZiAodGVzdC1wYXRoICIkbG9jYXRpb25cU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikgew0KICAgICAgICAgICAgICAgICRsb2NhdGlvbnMuQWRkKCRsb2NhdGlvbikNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkcGlja01lbnUgPSBuZXctb2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAgICAgJHBpY2tNZW51LnRleHQgPSAiRWNobyBSZWxheSBJbnN0YWxsZXIiDQogICAgICAgICRwaWNrTWVudS5JY29uID0gW1N5c3RlbS5EcmF3aW5nLkljb25dOjpFeHRyYWN0QXNzb2NpYXRlZEljb24oJGZpbGVMb2NhdGlvbjEpDQogICAgICAgICRwaWNrTWVudS5TaXplID0gTmV3LU9iamVjdCBEcmF3aW5nLlNpemUgQCgzMjAsIDI3MCkNCiAgICAgICAgJHBpY2tNZW51LlN0YXJ0UG9zaXRpb24gPSAiQ2VudGVyU2NyZWVuIg0KICAgICAgICAkcGlja01lbnUuRm9ybUJvcmRlclN0eWxlID0gIkZpeGVkRGlhbG9nIg0KICAgICAgICAkcGlja01lbnUuTWF4aW1pemVCb3ggPSAkZmFsc2UNCiAgICAgICAgJHBpY2tNZW51LlNob3dJblRhc2tiYXIgPSAkZmFsc2UNCg0KICAgICAgICAkcGlja0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICAgICAkcGlja0xhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwLDEwKQ0KICAgICAgICAkcGlja0xhYmVsLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDIwKQ0KICAgICAgICAkcGlja0xhYmVsLlRleHQgPSAiU2VsZWN0IGZvbGRlciBFY2hvIFZSIGlzIGxvY2F0ZWQgaW4iDQogICAgICAgICRwaWNrTGFiZWwuVGV4dEFsaWduID0gIk1pZGRsZUNlbnRlciINCiAgICAgICAgJHBpY2tMYWJlbC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrTGFiZWwpDQoNCiAgICAgICAgJHBpY2tMaXN0ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MaXN0Qm94DQogICAgICAgICRwaWNrTGlzdC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwzMCkNCiAgICAgICAgJHBpY2tMaXN0LlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDEwMCkNCiAgICAgICAgJHBpY2tMaXN0LkZvbnQgPSAiTWljcm9zb2Z0IFNhbnMgU2VyaWYsMTAiDQogICAgICAgICRwaWNrTGlzdC5EYXRhU291cmNlID0gJGxvY2F0aW9uTGlzdA0KICAgICAgICAkcGlja0xpc3QuU2VsZWN0ZWRJbmRleCA9ICRpDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJHBpY2tMaXN0KQ0KDQogICAgICAgICRjdXN0b21QYXRoID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5CdXR0b24NCiAgICAgICAgJGN1c3RvbVBhdGguTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTAsMTQwKQ0KICAgICAgICAkY3VzdG9tUGF0aC5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDI4MCwzMCkNCiAgICAgICAgJGN1c3RvbVBhdGguVGV4dCA9ICJDdXN0b20gUGF0aCINCiAgICAgICAgJGN1c3RvbVBhdGguRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJGN1c3RvbVBhdGguQWRkX0NsaWNrKHsNCiAgICAgICAgICAgICRjaG9pY2UgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkl0IGlzIHJlY29tbWVuZGVkIHRoYXQgeW91IHVzZSB0aGUgcHJlLXNlbGVjdGVkIGZvbGRlciBzbyB0aGF0IHRoZSBPY3VsdXMgYXBwIGxhdW5jaGVzIHRoZSBjb3JyZWN0IHZlcnNpb24gb2YgdGhlIGdhbWUuYG5gbmBXaGlsZSB5b3UgY2FuIHVzZSBhIGN1c3RvbSBwYXRoIGl0IGlzIG5vdCByZWNvbW1lbmRlZC4gV291bGQgeW91IHN0aWxsIGxpa2UgdG8gdXNlIGEgY3VzdG9tIHBhdGg/IiwgIkVjaG8gUmVsYXkgRG93bmdyYWRlciIsIFtzeXN0ZW0ud2luZG93cy5mb3Jtcy5tZXNzYWdlYm94YnV0dG9uc106Olllc05vLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGljb25dOjpXYXJuaW5nKQ0KICAgICAgICAgICAgaWYgKCRjaG9pY2UgLWVxICJObyIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSBSZWFkLUZvbGRlckJyb3dzZXJEaWFsb2cgLU1lc3NhZ2UgIlNlbGVjdCB0aGUgZm9sZGVyIEVjaG8gVlIgaXMgaW5zdGFsbGVkIGluIg0KICAgICAgICAgICAgaWYgKCEodGVzdC1wYXRoICIkZ2xvYmFsOmdhbWVQYXRoXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRwaWNrTWVudS5DbG9zZSgpDQogICAgICAgIH0pDQogICAgICAgICRwaWNrTWVudS5Db250cm9scy5BZGQoJGN1c3RvbVBhdGgpDQoNCiAgICAgICAgJHBpY2tCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbg0KICAgICAgICAkcGlja0J1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwxODApDQogICAgICAgICRwaWNrQnV0dG9uLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMjgwLDMwKQ0KICAgICAgICAkcGlja0J1dHRvbi5UZXh0ID0gIlNlbGVjdCINCiAgICAgICAgJHBpY2tCdXR0b24uRm9udCA9ICJNaWNyb3NvZnQgU2FucyBTZXJpZiwxMCINCiAgICAgICAgJHBpY2tCdXR0b24uQWRkX0NsaWNrKHsNCiAgICAgICAgICAgIGlmICghKHRlc3QtcGF0aCAiJCgkbG9jYXRpb25zWyRwaWNrbGlzdC5TZWxlY3RlZEluZGV4XSlcU29mdHdhcmVccmVhZHktYXQtZGF3bi1lY2hvLWFyZW5hXGJpblx3aW4xMFxlY2hvdnIuZXhlIikpIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OnNob3coIlBsZWFzZSBzZWxlY3QgYSB2YWxpZCBnYW1lIGZvbGRlciIsICJFY2hvIFJlbGF5IERvd25ncmFkZXIiLCBbc3lzdGVtLndpbmRvd3MuZm9ybXMubWVzc2FnZWJveGJ1dHRvbnNdOjpPSywgW3N5c3RlbS53aW5kb3dzLmZvcm1zLm1lc3NhZ2Vib3hpY29uXTo6V2FybmluZykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRnbG9iYWw6Z2FtZVBhdGggPSAiJCgkcGlja0xpc3QuU2VsZWN0ZWRJdGVtKVxTb2Z0d2FyZVxyZWFkeS1hdC1kYXduLWVjaG8tYXJlbmEiDQogICAgICAgICAgICAkcGlja01lbnUuQ2xvc2UoKQ0KICAgICAgICB9KQ0KICAgICAgICAkcGlja01lbnUuQ29udHJvbHMuQWRkKCRwaWNrQnV0dG9uKQ0KDQogICAgICAgICRwaWNrTWVudS5TaG93RGlhbG9nKCkNCiAgICB9KQ0KICAgICRjdXJyZW50UGF0aC5UZXh0ID0gIkN1cnJlbnQgR2FtZSBGb2xkZXI6YG4kZ2xvYmFsOmdhbWVQYXRoIg0KICAgICRtZW51LkNvbnRyb2xzLkFkZCgkc2VsZWN0R2FtZUZvbGRlcikNCn0NCiRjdXJyZW50UGF0aC5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMCwyNTApDQokY3VycmVudFBhdGguU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgyMDAwLDIwMCkNCiRjdXJyZW50UGF0aC5Gb250ID0gIk1pY3Jvc29mdCBTYW5zIFNlcmlmLDEwIg0KJG1lbnUuQ29udHJvbHMuQWRkKCRjdXJyZW50UGF0aCkNCg0KJG1lbnUuU2hvd0RpYWxvZygpDQoNCg=="
}
